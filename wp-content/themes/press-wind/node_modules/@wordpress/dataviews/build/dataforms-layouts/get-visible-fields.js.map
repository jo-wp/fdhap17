{"version":3,"names":["_normalizeFields","require","getVisibleFields","fields","formFields","combinedFields","visibleFields","push","normalizeCombinedFields","map","fieldId","find","id","filter","field"],"sources":["@wordpress/dataviews/src/dataforms-layouts/get-visible-fields.ts"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { normalizeCombinedFields } from '../normalize-fields';\nimport type {\n\tField,\n\tCombinedFormField,\n\tNormalizedCombinedFormField,\n} from '../types';\n\nexport function getVisibleFields< Item >(\n\tfields: Field< Item >[],\n\tformFields: string[] = [],\n\tcombinedFields?: CombinedFormField< Item >[]\n): Field< Item >[] {\n\tconst visibleFields: Array<\n\t\tField< Item > | NormalizedCombinedFormField< Item >\n\t> = [ ...fields ];\n\tif ( combinedFields ) {\n\t\tvisibleFields.push(\n\t\t\t...normalizeCombinedFields( combinedFields, fields )\n\t\t);\n\t}\n\treturn formFields\n\t\t.map( ( fieldId ) =>\n\t\t\tvisibleFields.find( ( { id } ) => id === fieldId )\n\t\t)\n\t\t.filter( ( field ): field is Field< Item > => !! field );\n}\n"],"mappings":";;;;;;AAGA,IAAAA,gBAAA,GAAAC,OAAA;AAHA;AACA;AACA;;AAQO,SAASC,gBAAgBA,CAC/BC,MAAuB,EACvBC,UAAoB,GAAG,EAAE,EACzBC,cAA4C,EAC1B;EAClB,MAAMC,aAEL,GAAG,CAAE,GAAGH,MAAM,CAAE;EACjB,IAAKE,cAAc,EAAG;IACrBC,aAAa,CAACC,IAAI,CACjB,GAAG,IAAAC,wCAAuB,EAAEH,cAAc,EAAEF,MAAO,CACpD,CAAC;EACF;EACA,OAAOC,UAAU,CACfK,GAAG,CAAIC,OAAO,IACdJ,aAAa,CAACK,IAAI,CAAE,CAAE;IAAEC;EAAG,CAAC,KAAMA,EAAE,KAAKF,OAAQ,CAClD,CAAC,CACAG,MAAM,CAAIC,KAAK,IAA8B,CAAC,CAAEA,KAAM,CAAC;AAC1D","ignoreList":[]}