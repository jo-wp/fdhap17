"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _icons = require("@wordpress/icons");
var _warning = _interopRequireDefault(require("@wordpress/warning"));
var _compose = require("@wordpress/compose");
var _constants = require("../../constants");
var _dataviewsLayouts = require("../../dataviews-layouts");
var _dataviewsContext = _interopRequireDefault(require("../dataviews-context"));
var _lockUnlock = require("../../lock-unlock");
var _densityPicker = _interopRequireDefault(require("../../dataviews-layouts/grid/density-picker"));
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const {
  DropdownMenuV2
} = (0, _lockUnlock.unlock)(_components.privateApis);
const DATAVIEWS_CONFIG_POPOVER_PROPS = {
  placement: 'bottom-end',
  offset: 9
};
function ViewTypeMenu({
  defaultLayouts = {
    list: {},
    grid: {},
    table: {}
  }
}) {
  const {
    view,
    onChangeView
  } = (0, _element.useContext)(_dataviewsContext.default);
  const availableLayouts = Object.keys(defaultLayouts);
  if (availableLayouts.length <= 1) {
    return null;
  }
  const activeView = _dataviewsLayouts.VIEW_LAYOUTS.find(v => view.type === v.type);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownMenuV2, {
    trigger: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
      size: "compact",
      icon: activeView?.icon,
      label: (0, _i18n.__)('Layout')
    }),
    children: availableLayouts.map(layout => {
      const config = _dataviewsLayouts.VIEW_LAYOUTS.find(v => v.type === layout);
      if (!config) {
        return null;
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownMenuV2.RadioItem, {
        value: layout,
        name: "view-actions-available-view",
        checked: layout === view.type,
        hideOnClick: true,
        onChange: e => {
          switch (e.target.value) {
            case 'list':
            case 'grid':
            case 'table':
              return onChangeView({
                ...view,
                type: e.target.value,
                ...defaultLayouts[e.target.value]
              });
          }
          globalThis.SCRIPT_DEBUG === true ? (0, _warning.default)('Invalid dataview') : void 0;
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DropdownMenuV2.ItemLabel, {
          children: config.label
        })
      }, layout);
    })
  });
}
function SortFieldControl() {
  const {
    view,
    fields,
    onChangeView
  } = (0, _element.useContext)(_dataviewsContext.default);
  const orderOptions = (0, _element.useMemo)(() => {
    const sortableFields = fields.filter(field => field.enableSorting !== false);
    return sortableFields.map(field => {
      return {
        label: field.label,
        value: field.id
      };
    });
  }, [fields]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.SelectControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    label: (0, _i18n.__)('Sort by'),
    value: view.sort?.field,
    options: orderOptions,
    onChange: value => {
      onChangeView({
        ...view,
        sort: {
          direction: view?.sort?.direction || 'desc',
          field: value
        }
      });
    }
  });
}
function SortDirectionControl() {
  const {
    view,
    fields,
    onChangeView
  } = (0, _element.useContext)(_dataviewsContext.default);
  const sortableFields = fields.filter(field => field.enableSorting !== false);
  if (sortableFields.length === 0) {
    return null;
  }
  let value = view.sort?.direction;
  if (!value && view.sort?.field) {
    value = 'desc';
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalToggleGroupControl, {
    className: "dataviews-view-config__sort-direction",
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    isBlock: true,
    label: (0, _i18n.__)('Order'),
    value: value,
    onChange: newDirection => {
      if (newDirection === 'asc' || newDirection === 'desc') {
        onChangeView({
          ...view,
          sort: {
            direction: newDirection,
            field: view.sort?.field ||
            // If there is no field assigned as the sorting field assign the first sortable field.
            fields.find(field => field.enableSorting !== false)?.id || ''
          }
        });
        return;
      }
      globalThis.SCRIPT_DEBUG === true ? (0, _warning.default)('Invalid direction') : void 0;
    },
    children: _constants.SORTING_DIRECTIONS.map(direction => {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalToggleGroupControlOptionIcon, {
        value: direction,
        icon: _constants.sortIcons[direction],
        label: _constants.sortLabels[direction]
      }, direction);
    })
  });
}
const PAGE_SIZE_VALUES = [10, 20, 50, 100];
function ItemsPerPageControl() {
  const {
    view,
    onChangeView
  } = (0, _element.useContext)(_dataviewsContext.default);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalToggleGroupControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    isBlock: true,
    label: (0, _i18n.__)('Items per page'),
    value: view.perPage || 10,
    disabled: !view?.sort?.field,
    onChange: newItemsPerPage => {
      const newItemsPerPageNumber = typeof newItemsPerPage === 'number' || newItemsPerPage === undefined ? newItemsPerPage : parseInt(newItemsPerPage, 10);
      onChangeView({
        ...view,
        perPage: newItemsPerPageNumber,
        page: 1
      });
    },
    children: PAGE_SIZE_VALUES.map(value => {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalToggleGroupControlOption, {
        value: value,
        label: value.toString()
      }, value);
    })
  });
}
function FieldItem({
  field: {
    id,
    label,
    index,
    isVisible,
    isHidable
  },
  fields,
  view,
  onChangeView
}) {
  const visibleFieldIds = (0, _dataviewsLayouts.getVisibleFieldIds)(view, fields);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalItem, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
      expanded: true,
      className: `dataviews-field-control__field dataviews-field-control__field-${id}`,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        children: label
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
        justify: "flex-end",
        expanded: false,
        className: "dataviews-field-control__actions",
        children: [view.type === _constants.LAYOUT_TABLE && isVisible && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
            disabled: index < 1,
            accessibleWhenDisabled: true,
            size: "compact",
            onClick: () => {
              var _visibleFieldIds$slic;
              onChangeView({
                ...view,
                fields: [...((_visibleFieldIds$slic = visibleFieldIds.slice(0, index - 1)) !== null && _visibleFieldIds$slic !== void 0 ? _visibleFieldIds$slic : []), id, visibleFieldIds[index - 1], ...visibleFieldIds.slice(index + 1)]
              });
            },
            icon: _icons.chevronUp,
            label: (0, _i18n.sprintf)(/* translators: %s: field label */
            (0, _i18n.__)('Move %s up'), label)
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
            disabled: index >= visibleFieldIds.length - 1,
            accessibleWhenDisabled: true,
            size: "compact",
            onClick: () => {
              var _visibleFieldIds$slic2;
              onChangeView({
                ...view,
                fields: [...((_visibleFieldIds$slic2 = visibleFieldIds.slice(0, index)) !== null && _visibleFieldIds$slic2 !== void 0 ? _visibleFieldIds$slic2 : []), visibleFieldIds[index + 1], id, ...visibleFieldIds.slice(index + 2)]
              });
            },
            icon: _icons.chevronDown,
            label: (0, _i18n.sprintf)(/* translators: %s: field label */
            (0, _i18n.__)('Move %s down'), label)
          }), ' ']
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
          className: "dataviews-field-control__field-visibility-button",
          disabled: !isHidable,
          accessibleWhenDisabled: true,
          size: "compact",
          onClick: () => {
            onChangeView({
              ...view,
              fields: isVisible ? visibleFieldIds.filter(fieldId => fieldId !== id) : [...visibleFieldIds, id]
            });
            // Focus the visibility button to avoid focus loss.
            // Our code is safe against the component being unmounted, so we don't need to worry about cleaning the timeout.
            // eslint-disable-next-line @wordpress/react-no-unsafe-timeout
            setTimeout(() => {
              const element = document.querySelector(`.dataviews-field-control__field-${id} .dataviews-field-control__field-visibility-button`);
              if (element instanceof HTMLElement) {
                element.focus();
              }
            }, 50);
          },
          icon: isVisible ? _icons.unseen : _icons.seen,
          label: isVisible ? (0, _i18n.sprintf)(/* translators: %s: field label */
          (0, _i18n.__)('Hide %s'), label) : (0, _i18n.sprintf)(/* translators: %s: field label */
          (0, _i18n.__)('Show %s'), label)
        })]
      })]
    })
  }, id);
}
function FieldControl() {
  const {
    view,
    fields,
    onChangeView
  } = (0, _element.useContext)(_dataviewsContext.default);
  const visibleFieldIds = (0, _element.useMemo)(() => (0, _dataviewsLayouts.getVisibleFieldIds)(view, fields), [view, fields]);
  const hiddenFieldIds = (0, _element.useMemo)(() => (0, _dataviewsLayouts.getHiddenFieldIds)(view, fields), [view, fields]);
  const notHidableFieldIds = (0, _element.useMemo)(() => (0, _dataviewsLayouts.getNotHidableFieldIds)(view), [view]);
  const visibleFields = fields.filter(({
    id
  }) => visibleFieldIds.includes(id)).map(({
    id,
    label,
    enableHiding
  }) => {
    return {
      id,
      label,
      index: visibleFieldIds.indexOf(id),
      isVisible: true,
      isHidable: notHidableFieldIds.includes(id) ? false : enableHiding
    };
  });
  if (view.type === _constants.LAYOUT_TABLE && view.layout?.combinedFields) {
    view.layout.combinedFields.forEach(({
      id,
      label
    }) => {
      visibleFields.push({
        id,
        label,
        index: visibleFieldIds.indexOf(id),
        isVisible: true,
        isHidable: notHidableFieldIds.includes(id)
      });
    });
  }
  visibleFields.sort((a, b) => a.index - b.index);
  const hiddenFields = fields.filter(({
    id
  }) => hiddenFieldIds.includes(id)).map(({
    id,
    label,
    enableHiding
  }, index) => {
    return {
      id,
      label,
      index,
      isVisible: false,
      isHidable: enableHiding
    };
  });
  if (!visibleFields?.length && !hiddenFields?.length) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
    spacing: 6,
    className: "dataviews-field-control",
    children: [!!visibleFields?.length && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalItemGroup, {
      isBordered: true,
      isSeparated: true,
      children: visibleFields.map(field => /*#__PURE__*/(0, _jsxRuntime.jsx)(FieldItem, {
        field: field,
        fields: fields,
        view: view,
        onChangeView: onChangeView
      }, field.id))
    }), !!hiddenFields?.length && /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
        spacing: 4,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.BaseControl.VisualLabel, {
          style: {
            margin: 0
          },
          children: (0, _i18n.__)('Hidden')
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalItemGroup, {
          isBordered: true,
          isSeparated: true,
          children: hiddenFields.map(field => /*#__PURE__*/(0, _jsxRuntime.jsx)(FieldItem, {
            field: field,
            fields: fields,
            view: view,
            onChangeView: onChangeView
          }, field.id))
        })]
      })
    })]
  });
}
function SettingsSection({
  title,
  description,
  children
}) {
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalGrid, {
    columns: 12,
    className: "dataviews-settings-section",
    gap: 4,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "dataviews-settings-section__sidebar",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalHeading, {
        level: 2,
        className: "dataviews-settings-section__title",
        children: title
      }), description && /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalText, {
        variant: "muted",
        className: "dataviews-settings-section__description",
        children: description
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalGrid, {
      columns: 8,
      gap: 4,
      className: "dataviews-settings-section__content",
      children: children
    })]
  });
}
function DataviewsViewConfigDropdown({
  density,
  setDensity
}) {
  const {
    view
  } = (0, _element.useContext)(_dataviewsContext.default);
  const popoverId = (0, _compose.useInstanceId)(_DataViewsViewConfig, 'dataviews-view-config-dropdown');
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Dropdown, {
    popoverProps: {
      ...DATAVIEWS_CONFIG_POPOVER_PROPS,
      id: popoverId
    },
    renderToggle: ({
      onToggle,
      isOpen
    }) => {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
        size: "compact",
        icon: _icons.cog,
        label: (0, _i18n._x)('View options', 'View is used as a noun'),
        onClick: onToggle,
        "aria-expanded": isOpen ? 'true' : 'false',
        "aria-controls": popoverId
      });
    },
    renderContent: () => /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalDropdownContentWrapper, {
      paddingSize: "medium",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalVStack, {
        className: "dataviews-view-config",
        spacing: 6,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(SettingsSection, {
          title: (0, _i18n.__)('Appearance'),
          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_components.__experimentalHStack, {
            expanded: true,
            className: "is-divided-in-two",
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(SortFieldControl, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(SortDirectionControl, {})]
          }), view.type === _constants.LAYOUT_GRID && /*#__PURE__*/(0, _jsxRuntime.jsx)(_densityPicker.default, {
            density: density,
            setDensity: setDensity
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(ItemsPerPageControl, {})]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(SettingsSection, {
          title: (0, _i18n.__)('Properties'),
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(FieldControl, {})
        })]
      })
    })
  });
}
function _DataViewsViewConfig({
  density,
  setDensity,
  defaultLayouts = {
    list: {},
    grid: {},
    table: {}
  }
}) {
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(ViewTypeMenu, {
      defaultLayouts: defaultLayouts
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(DataviewsViewConfigDropdown, {
      density: density,
      setDensity: setDensity
    })]
  });
}
const DataViewsViewConfig = (0, _element.memo)(_DataViewsViewConfig);
var _default = exports.default = DataViewsViewConfig;
//# sourceMappingURL=index.js.map