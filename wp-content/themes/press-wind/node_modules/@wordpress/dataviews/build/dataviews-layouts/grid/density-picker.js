"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DensityPicker;
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _element = require("@wordpress/element");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

const viewportBreaks = {
  xhuge: {
    min: 3,
    max: 6,
    default: 5
  },
  huge: {
    min: 2,
    max: 4,
    default: 4
  },
  xlarge: {
    min: 2,
    max: 3,
    default: 3
  },
  large: {
    min: 1,
    max: 2,
    default: 2
  },
  mobile: {
    min: 1,
    max: 2,
    default: 2
  }
};
function useViewPortBreakpoint() {
  const isXHuge = (0, _compose.useViewportMatch)('xhuge', '>=');
  const isHuge = (0, _compose.useViewportMatch)('huge', '>=');
  const isXlarge = (0, _compose.useViewportMatch)('xlarge', '>=');
  const isLarge = (0, _compose.useViewportMatch)('large', '>=');
  const isMobile = (0, _compose.useViewportMatch)('mobile', '>=');
  if (isXHuge) {
    return 'xhuge';
  }
  if (isHuge) {
    return 'huge';
  }
  if (isXlarge) {
    return 'xlarge';
  }
  if (isLarge) {
    return 'large';
  }
  if (isMobile) {
    return 'mobile';
  }
  return null;
}
function DensityPicker({
  density,
  setDensity
}) {
  const viewport = useViewPortBreakpoint();
  (0, _element.useEffect)(() => {
    setDensity(_density => {
      if (!viewport || !_density) {
        return 0;
      }
      const breakValues = viewportBreaks[viewport];
      if (_density < breakValues.min) {
        return breakValues.min;
      }
      if (_density > breakValues.max) {
        return breakValues.max;
      }
      return _density;
    });
  }, [setDensity, viewport]);
  const breakValues = viewportBreaks[viewport || 'mobile'];
  const densityToUse = density || breakValues.default;
  const marks = (0, _element.useMemo)(() => Array.from({
    length: breakValues.max - breakValues.min + 1
  }, (_, i) => {
    return {
      value: breakValues.min + i
    };
  }), [breakValues]);
  if (!viewport) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.RangeControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    showTooltip: false,
    label: (0, _i18n.__)('Preview size'),
    value: breakValues.max + breakValues.min - densityToUse,
    marks: marks,
    min: breakValues.min,
    max: breakValues.max,
    withInputField: false,
    onChange: (value = 0) => {
      setDensity(breakValues.max + breakValues.min - value);
    },
    step: 1
  });
}
//# sourceMappingURL=density-picker.js.map