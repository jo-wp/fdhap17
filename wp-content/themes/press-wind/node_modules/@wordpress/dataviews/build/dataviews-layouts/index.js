"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VIEW_LAYOUTS = void 0;
exports.getHiddenFieldIds = getHiddenFieldIds;
exports.getNotHidableFieldIds = getNotHidableFieldIds;
exports.getVisibleFieldIds = getVisibleFieldIds;
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _table = _interopRequireDefault(require("./table"));
var _grid = _interopRequireDefault(require("./grid"));
var _list = _interopRequireDefault(require("./list"));
var _constants = require("../constants");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const VIEW_LAYOUTS = exports.VIEW_LAYOUTS = [{
  type: _constants.LAYOUT_TABLE,
  label: (0, _i18n.__)('Table'),
  component: _table.default,
  icon: _icons.blockTable
}, {
  type: _constants.LAYOUT_GRID,
  label: (0, _i18n.__)('Grid'),
  component: _grid.default,
  icon: _icons.category
}, {
  type: _constants.LAYOUT_LIST,
  label: (0, _i18n.__)('List'),
  component: _list.default,
  icon: (0, _i18n.isRTL)() ? _icons.formatListBulletsRTL : _icons.formatListBullets
}];
function getNotHidableFieldIds(view) {
  if (view.type === 'table') {
    var _view$layout$combined;
    return [view.layout?.primaryField].concat((_view$layout$combined = view.layout?.combinedFields?.flatMap(field => field.children)) !== null && _view$layout$combined !== void 0 ? _view$layout$combined : []).filter(item => !!item);
  }
  if (view.type === 'grid') {
    return [view.layout?.primaryField, view.layout?.mediaField].filter(item => !!item);
  }
  if (view.type === 'list') {
    return [view.layout?.primaryField, view.layout?.mediaField].filter(item => !!item);
  }
  return [];
}
function getCombinedFieldIds(view) {
  const combinedFields = [];
  if (view.type === _constants.LAYOUT_TABLE && view.layout?.combinedFields) {
    view.layout.combinedFields.forEach(combination => {
      combinedFields.push(...combination.children);
    });
  }
  return combinedFields;
}
function getVisibleFieldIds(view, fields) {
  const fieldsToExclude = getCombinedFieldIds(view);
  if (view.fields) {
    return view.fields.filter(id => !fieldsToExclude.includes(id));
  }
  const visibleFields = [];
  if (view.type === _constants.LAYOUT_TABLE && view.layout?.combinedFields) {
    visibleFields.push(...view.layout.combinedFields.map(({
      id
    }) => id));
  }
  visibleFields.push(...fields.filter(({
    id
  }) => !fieldsToExclude.includes(id)).map(({
    id
  }) => id));
  return visibleFields;
}
function getHiddenFieldIds(view, fields) {
  const fieldsToExclude = [...getCombinedFieldIds(view), ...getVisibleFieldIds(view, fields)];

  // The media field does not need to be in the view.fields to be displayed.
  if (view.type === _constants.LAYOUT_GRID && view.layout?.mediaField) {
    fieldsToExclude.push(view.layout?.mediaField);
  }
  if (view.type === _constants.LAYOUT_LIST && view.layout?.mediaField) {
    fieldsToExclude.push(view.layout?.mediaField);
  }
  return fields.filter(({
    id,
    enableHiding
  }) => !fieldsToExclude.includes(id) && enableHiding).map(({
    id
  }) => id);
}
//# sourceMappingURL=index.js.map