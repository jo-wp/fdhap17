"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeCombinedFields = normalizeCombinedFields;
exports.normalizeFields = normalizeFields;
var _fieldTypes = _interopRequireDefault(require("./field-types"));
var _dataformControls = require("./dataform-controls");
var _dataformCombinedEdit = _interopRequireDefault(require("./components/dataform-combined-edit"));
/**
 * Internal dependencies
 */

/**
 * Apply default values and normalize the fields config.
 *
 * @param fields Fields config.
 * @return Normalized fields config.
 */
function normalizeFields(fields) {
  return fields.map(field => {
    var _field$sort, _field$isValid, _field$enableHiding, _field$enableSorting;
    const fieldTypeDefinition = (0, _fieldTypes.default)(field.type);
    const getValue = field.getValue || (({
      item
    }) => item[field.id]);
    const sort = (_field$sort = field.sort) !== null && _field$sort !== void 0 ? _field$sort : function sort(a, b, direction) {
      return fieldTypeDefinition.sort(getValue({
        item: a
      }), getValue({
        item: b
      }), direction);
    };
    const isValid = (_field$isValid = field.isValid) !== null && _field$isValid !== void 0 ? _field$isValid : function isValid(item, context) {
      return fieldTypeDefinition.isValid(getValue({
        item
      }), context);
    };
    const Edit = (0, _dataformControls.getControl)(field, fieldTypeDefinition);
    const renderFromElements = ({
      item
    }) => {
      const value = getValue({
        item
      });
      return field?.elements?.find(element => element.value === value)?.label || getValue({
        item
      });
    };
    const render = field.render || (field.elements ? renderFromElements : getValue);
    return {
      ...field,
      label: field.label || field.id,
      header: field.header || field.label || field.id,
      getValue,
      render,
      sort,
      isValid,
      Edit,
      enableHiding: (_field$enableHiding = field.enableHiding) !== null && _field$enableHiding !== void 0 ? _field$enableHiding : true,
      enableSorting: (_field$enableSorting = field.enableSorting) !== null && _field$enableSorting !== void 0 ? _field$enableSorting : true
    };
  });
}

/**
 * Apply default values and normalize the fields config.
 *
 * @param combinedFields combined field list.
 * @param fields         Fields config.
 * @return Normalized fields config.
 */
function normalizeCombinedFields(combinedFields, fields) {
  return combinedFields.map(combinedField => {
    return {
      ...combinedField,
      Edit: _dataformCombinedEdit.default,
      fields: normalizeFields(combinedField.children.map(fieldId => fields.find(({
        id
      }) => id === fieldId)).filter(field => !!field))
    };
  });
}
//# sourceMappingURL=normalize-fields.js.map