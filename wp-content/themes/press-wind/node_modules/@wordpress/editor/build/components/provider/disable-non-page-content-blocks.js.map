{"version":3,"names":["_data","require","_blockEditor","_element","_usePostContentBlocks","_interopRequireDefault","DisableNonPageContentBlocks","contentOnlyIds","usePostContentBlocks","templateParts","useSelect","select","getBlocksByName","blockEditorStore","disabledIds","getBlockOrder","flatMap","clientId","registry","useRegistry","useEffect","setBlockEditingMode","unsetBlockEditingMode","dispatch","batch"],"sources":["@wordpress/editor/src/components/provider/disable-non-page-content-blocks.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect, useRegistry } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useEffect } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport usePostContentBlocks from './use-post-content-blocks';\n\n/**\n * Component that when rendered, makes it so that the site editor allows only\n * page content to be edited.\n */\nexport default function DisableNonPageContentBlocks() {\n\tconst contentOnlyIds = usePostContentBlocks();\n\tconst templateParts = useSelect( ( select ) => {\n\t\tconst { getBlocksByName } = select( blockEditorStore );\n\t\treturn getBlocksByName( 'core/template-part' );\n\t}, [] );\n\tconst disabledIds = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockOrder } = select( blockEditorStore );\n\t\t\treturn templateParts.flatMap( ( clientId ) =>\n\t\t\t\tgetBlockOrder( clientId )\n\t\t\t);\n\t\t},\n\t\t[ templateParts ]\n\t);\n\n\tconst registry = useRegistry();\n\n\tuseEffect( () => {\n\t\tconst { setBlockEditingMode, unsetBlockEditingMode } =\n\t\t\tregistry.dispatch( blockEditorStore );\n\n\t\tregistry.batch( () => {\n\t\t\tsetBlockEditingMode( '', 'disabled' );\n\t\t\tfor ( const clientId of contentOnlyIds ) {\n\t\t\t\tsetBlockEditingMode( clientId, 'contentOnly' );\n\t\t\t}\n\t\t\tfor ( const clientId of templateParts ) {\n\t\t\t\tsetBlockEditingMode( clientId, 'contentOnly' );\n\t\t\t}\n\t\t\tfor ( const clientId of disabledIds ) {\n\t\t\t\tsetBlockEditingMode( clientId, 'disabled' );\n\t\t\t}\n\t\t} );\n\n\t\treturn () => {\n\t\t\tregistry.batch( () => {\n\t\t\t\tunsetBlockEditingMode( '' );\n\t\t\t\tfor ( const clientId of contentOnlyIds ) {\n\t\t\t\t\tunsetBlockEditingMode( clientId );\n\t\t\t\t}\n\t\t\t\tfor ( const clientId of templateParts ) {\n\t\t\t\t\tunsetBlockEditingMode( clientId );\n\t\t\t\t}\n\t\t\t\tfor ( const clientId of disabledIds ) {\n\t\t\t\t\tunsetBlockEditingMode( clientId );\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\t}, [ templateParts, contentOnlyIds, disabledIds, registry ] );\n\n\treturn null;\n}\n"],"mappings":";;;;;;;AAGA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAKA,IAAAG,qBAAA,GAAAC,sBAAA,CAAAJ,OAAA;AAVA;AACA;AACA;;AAKA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACe,SAASK,2BAA2BA,CAAA,EAAG;EACrD,MAAMC,cAAc,GAAG,IAAAC,6BAAoB,EAAC,CAAC;EAC7C,MAAMC,aAAa,GAAG,IAAAC,eAAS,EAAIC,MAAM,IAAM;IAC9C,MAAM;MAAEC;IAAgB,CAAC,GAAGD,MAAM,CAAEE,kBAAiB,CAAC;IACtD,OAAOD,eAAe,CAAE,oBAAqB,CAAC;EAC/C,CAAC,EAAE,EAAG,CAAC;EACP,MAAME,WAAW,GAAG,IAAAJ,eAAS,EAC1BC,MAAM,IAAM;IACb,MAAM;MAAEI;IAAc,CAAC,GAAGJ,MAAM,CAAEE,kBAAiB,CAAC;IACpD,OAAOJ,aAAa,CAACO,OAAO,CAAIC,QAAQ,IACvCF,aAAa,CAAEE,QAAS,CACzB,CAAC;EACF,CAAC,EACD,CAAER,aAAa,CAChB,CAAC;EAED,MAAMS,QAAQ,GAAG,IAAAC,iBAAW,EAAC,CAAC;EAE9B,IAAAC,kBAAS,EAAE,MAAM;IAChB,MAAM;MAAEC,mBAAmB;MAAEC;IAAsB,CAAC,GACnDJ,QAAQ,CAACK,QAAQ,CAAEV,kBAAiB,CAAC;IAEtCK,QAAQ,CAACM,KAAK,CAAE,MAAM;MACrBH,mBAAmB,CAAE,EAAE,EAAE,UAAW,CAAC;MACrC,KAAM,MAAMJ,QAAQ,IAAIV,cAAc,EAAG;QACxCc,mBAAmB,CAAEJ,QAAQ,EAAE,aAAc,CAAC;MAC/C;MACA,KAAM,MAAMA,QAAQ,IAAIR,aAAa,EAAG;QACvCY,mBAAmB,CAAEJ,QAAQ,EAAE,aAAc,CAAC;MAC/C;MACA,KAAM,MAAMA,QAAQ,IAAIH,WAAW,EAAG;QACrCO,mBAAmB,CAAEJ,QAAQ,EAAE,UAAW,CAAC;MAC5C;IACD,CAAE,CAAC;IAEH,OAAO,MAAM;MACZC,QAAQ,CAACM,KAAK,CAAE,MAAM;QACrBF,qBAAqB,CAAE,EAAG,CAAC;QAC3B,KAAM,MAAML,QAAQ,IAAIV,cAAc,EAAG;UACxCe,qBAAqB,CAAEL,QAAS,CAAC;QAClC;QACA,KAAM,MAAMA,QAAQ,IAAIR,aAAa,EAAG;UACvCa,qBAAqB,CAAEL,QAAS,CAAC;QAClC;QACA,KAAM,MAAMA,QAAQ,IAAIH,WAAW,EAAG;UACrCQ,qBAAqB,CAAEL,QAAS,CAAC;QAClC;MACD,CAAE,CAAC;IACJ,CAAC;EACF,CAAC,EAAE,CAAER,aAAa,EAAEF,cAAc,EAAEO,WAAW,EAAEI,QAAQ,CAAG,CAAC;EAE7D,OAAO,IAAI;AACZ","ignoreList":[]}