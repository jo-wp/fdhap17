"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DisableNonPageContentBlocks;
var _data = require("@wordpress/data");
var _blockEditor = require("@wordpress/block-editor");
var _element = require("@wordpress/element");
var _usePostContentBlocks = _interopRequireDefault(require("./use-post-content-blocks"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Component that when rendered, makes it so that the site editor allows only
 * page content to be edited.
 */
function DisableNonPageContentBlocks() {
  const contentOnlyIds = (0, _usePostContentBlocks.default)();
  const templateParts = (0, _data.useSelect)(select => {
    const {
      getBlocksByName
    } = select(_blockEditor.store);
    return getBlocksByName('core/template-part');
  }, []);
  const disabledIds = (0, _data.useSelect)(select => {
    const {
      getBlockOrder
    } = select(_blockEditor.store);
    return templateParts.flatMap(clientId => getBlockOrder(clientId));
  }, [templateParts]);
  const registry = (0, _data.useRegistry)();
  (0, _element.useEffect)(() => {
    const {
      setBlockEditingMode,
      unsetBlockEditingMode
    } = registry.dispatch(_blockEditor.store);
    registry.batch(() => {
      setBlockEditingMode('', 'disabled');
      for (const clientId of contentOnlyIds) {
        setBlockEditingMode(clientId, 'contentOnly');
      }
      for (const clientId of templateParts) {
        setBlockEditingMode(clientId, 'contentOnly');
      }
      for (const clientId of disabledIds) {
        setBlockEditingMode(clientId, 'disabled');
      }
    });
    return () => {
      registry.batch(() => {
        unsetBlockEditingMode('');
        for (const clientId of contentOnlyIds) {
          unsetBlockEditingMode(clientId);
        }
        for (const clientId of templateParts) {
          unsetBlockEditingMode(clientId);
        }
        for (const clientId of disabledIds) {
          unsetBlockEditingMode(clientId);
        }
      });
    };
  }, [templateParts, contentOnlyIds, disabledIds, registry]);
  return null;
}
//# sourceMappingURL=disable-non-page-content-blocks.js.map