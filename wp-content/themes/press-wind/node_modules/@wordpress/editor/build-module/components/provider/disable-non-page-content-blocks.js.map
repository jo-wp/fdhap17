{"version":3,"names":["useSelect","useRegistry","store","blockEditorStore","useEffect","usePostContentBlocks","DisableNonPageContentBlocks","contentOnlyIds","templateParts","select","getBlocksByName","disabledIds","getBlockOrder","flatMap","clientId","registry","setBlockEditingMode","unsetBlockEditingMode","dispatch","batch"],"sources":["@wordpress/editor/src/components/provider/disable-non-page-content-blocks.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect, useRegistry } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useEffect } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport usePostContentBlocks from './use-post-content-blocks';\n\n/**\n * Component that when rendered, makes it so that the site editor allows only\n * page content to be edited.\n */\nexport default function DisableNonPageContentBlocks() {\n\tconst contentOnlyIds = usePostContentBlocks();\n\tconst templateParts = useSelect( ( select ) => {\n\t\tconst { getBlocksByName } = select( blockEditorStore );\n\t\treturn getBlocksByName( 'core/template-part' );\n\t}, [] );\n\tconst disabledIds = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockOrder } = select( blockEditorStore );\n\t\t\treturn templateParts.flatMap( ( clientId ) =>\n\t\t\t\tgetBlockOrder( clientId )\n\t\t\t);\n\t\t},\n\t\t[ templateParts ]\n\t);\n\n\tconst registry = useRegistry();\n\n\tuseEffect( () => {\n\t\tconst { setBlockEditingMode, unsetBlockEditingMode } =\n\t\t\tregistry.dispatch( blockEditorStore );\n\n\t\tregistry.batch( () => {\n\t\t\tsetBlockEditingMode( '', 'disabled' );\n\t\t\tfor ( const clientId of contentOnlyIds ) {\n\t\t\t\tsetBlockEditingMode( clientId, 'contentOnly' );\n\t\t\t}\n\t\t\tfor ( const clientId of templateParts ) {\n\t\t\t\tsetBlockEditingMode( clientId, 'contentOnly' );\n\t\t\t}\n\t\t\tfor ( const clientId of disabledIds ) {\n\t\t\t\tsetBlockEditingMode( clientId, 'disabled' );\n\t\t\t}\n\t\t} );\n\n\t\treturn () => {\n\t\t\tregistry.batch( () => {\n\t\t\t\tunsetBlockEditingMode( '' );\n\t\t\t\tfor ( const clientId of contentOnlyIds ) {\n\t\t\t\t\tunsetBlockEditingMode( clientId );\n\t\t\t\t}\n\t\t\t\tfor ( const clientId of templateParts ) {\n\t\t\t\t\tunsetBlockEditingMode( clientId );\n\t\t\t\t}\n\t\t\t\tfor ( const clientId of disabledIds ) {\n\t\t\t\t\tunsetBlockEditingMode( clientId );\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\t}, [ templateParts, contentOnlyIds, disabledIds, registry ] );\n\n\treturn null;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,WAAW,QAAQ,iBAAiB;AACxD,SAASC,KAAK,IAAIC,gBAAgB,QAAQ,yBAAyB;AACnE,SAASC,SAAS,QAAQ,oBAAoB;;AAE9C;AACA;AACA;AACA,OAAOC,oBAAoB,MAAM,2BAA2B;;AAE5D;AACA;AACA;AACA;AACA,eAAe,SAASC,2BAA2BA,CAAA,EAAG;EACrD,MAAMC,cAAc,GAAGF,oBAAoB,CAAC,CAAC;EAC7C,MAAMG,aAAa,GAAGR,SAAS,CAAIS,MAAM,IAAM;IAC9C,MAAM;MAAEC;IAAgB,CAAC,GAAGD,MAAM,CAAEN,gBAAiB,CAAC;IACtD,OAAOO,eAAe,CAAE,oBAAqB,CAAC;EAC/C,CAAC,EAAE,EAAG,CAAC;EACP,MAAMC,WAAW,GAAGX,SAAS,CAC1BS,MAAM,IAAM;IACb,MAAM;MAAEG;IAAc,CAAC,GAAGH,MAAM,CAAEN,gBAAiB,CAAC;IACpD,OAAOK,aAAa,CAACK,OAAO,CAAIC,QAAQ,IACvCF,aAAa,CAAEE,QAAS,CACzB,CAAC;EACF,CAAC,EACD,CAAEN,aAAa,CAChB,CAAC;EAED,MAAMO,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9BG,SAAS,CAAE,MAAM;IAChB,MAAM;MAAEY,mBAAmB;MAAEC;IAAsB,CAAC,GACnDF,QAAQ,CAACG,QAAQ,CAAEf,gBAAiB,CAAC;IAEtCY,QAAQ,CAACI,KAAK,CAAE,MAAM;MACrBH,mBAAmB,CAAE,EAAE,EAAE,UAAW,CAAC;MACrC,KAAM,MAAMF,QAAQ,IAAIP,cAAc,EAAG;QACxCS,mBAAmB,CAAEF,QAAQ,EAAE,aAAc,CAAC;MAC/C;MACA,KAAM,MAAMA,QAAQ,IAAIN,aAAa,EAAG;QACvCQ,mBAAmB,CAAEF,QAAQ,EAAE,aAAc,CAAC;MAC/C;MACA,KAAM,MAAMA,QAAQ,IAAIH,WAAW,EAAG;QACrCK,mBAAmB,CAAEF,QAAQ,EAAE,UAAW,CAAC;MAC5C;IACD,CAAE,CAAC;IAEH,OAAO,MAAM;MACZC,QAAQ,CAACI,KAAK,CAAE,MAAM;QACrBF,qBAAqB,CAAE,EAAG,CAAC;QAC3B,KAAM,MAAMH,QAAQ,IAAIP,cAAc,EAAG;UACxCU,qBAAqB,CAAEH,QAAS,CAAC;QAClC;QACA,KAAM,MAAMA,QAAQ,IAAIN,aAAa,EAAG;UACvCS,qBAAqB,CAAEH,QAAS,CAAC;QAClC;QACA,KAAM,MAAMA,QAAQ,IAAIH,WAAW,EAAG;UACrCM,qBAAqB,CAAEH,QAAS,CAAC;QAClC;MACD,CAAE,CAAC;IACJ,CAAC;EACF,CAAC,EAAE,CAAEN,aAAa,EAAED,cAAc,EAAEI,WAAW,EAAEI,QAAQ,CAAG,CAAC;EAE7D,OAAO,IAAI;AACZ","ignoreList":[]}