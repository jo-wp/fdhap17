{"version":3,"names":["speak","apiFetch","deprecated","parse","synchronizeBlocksWithTemplate","__unstableSerializeAndClean","store","noticesStore","coreStore","blockEditorStore","applyFilters","applyFiltersAsync","doActionAsync","preferencesStore","__","TRASH_POST_NOTICE_ID","localAutosaveSet","getNotificationArgumentsForSaveSuccess","getNotificationArgumentsForSaveFail","getNotificationArgumentsForTrashFail","unlock","setupEditor","post","edits","template","dispatch","setEditedPost","type","id","isNewPost","status","content","raw","blocks","resetEditorBlocks","__unstableShouldCreateUndoLevel","Object","values","some","key","edit","_post$key$raw","editPost","__experimentalTearDownEditor","since","resetPost","version","alternative","updatePost","setupEditorState","postType","postId","options","select","registry","getCurrentPost","editEntityRecord","savePost","isEditedPostSaveable","getEditedPostContent","isAutosave","undoIgnore","previousRecord","getEntityRecordNonTransientEdits","error","err","saveEntityRecord","message","code","getLastEntitySaveError","Promise","resolve","args","length","createErrorNotice","updatedRecord","previousPost","resolveSelect","getPostType","createSuccessNotice","__unstableMarkLastChangeAsPersistent","refreshPost","trashPost","postTypeSlug","getCurrentPostType","removeNotice","rest_base","restBase","rest_namespace","restNamespace","path","method","autosave","local","isPostNew","isEditedPostNew","title","getEditedPostAttribute","excerpt","__unstableSaveForPreview","forceIsAutosaveable","isEditedPostAutosaveable","isPostLocked","isDraft","includes","isPreview","getEditedPostPreviewLink","redo","undo","createUndoLevel","updatePostLock","lock","enablePublishSidebar","set","disablePublishSidebar","lockPostSaving","lockName","unlockPostSaving","lockPostAutosaving","unlockPostAutosaving","selection","noChange","getEditedEntityRecord","__unstableCreateUndoLevel","blocksForSerialization","updateEditorSettings","settings","setRenderingMode","mode","__unstableIsEditorReady","clearSelectedBlock","undefined","setDeviceType","deviceType","toggleEditorPanelEnabled","panelName","_registry$select$get","inactivePanels","get","isPanelInactive","updatedInactivePanels","filter","invactivePanelName","toggleEditorPanelOpened","_registry$select$get2","openPanels","isPanelOpen","updatedOpenPanels","openPanelName","removeEditorPanel","setIsInserterOpened","value","hasOwnProperty","setInsertionPoint","rootClientId","index","insertionIndex","setIsListViewOpened","isOpen","toggleDistractionFree","isDistractionFree","batch","createInfoNotice","actions","label","onClick","toggle","switchEditorMode","openPublishSidebar","closePublishSidebar","togglePublishSidebar","getBlockEditorAction","name","resetBlocks","receiveBlocks","updateBlock","updateBlockAttributes","selectBlock","startMultiSelect","stopMultiSelect","multiSelect","toggleSelection","replaceBlocks","replaceBlock","moveBlocksDown","moveBlocksUp","moveBlockToPosition","insertBlock","insertBlocks","showInsertionPoint","hideInsertionPoint","setTemplateValidity","synchronizeTemplate","mergeBlocks","removeBlocks","removeBlock","toggleBlockMode","startTyping","stopTyping","enterFormattedText","exitFormattedText","insertDefaultBlock","updateBlockListSettings"],"sources":["@wordpress/editor/src/store/actions.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { speak } from '@wordpress/a11y';\nimport apiFetch from '@wordpress/api-fetch';\nimport deprecated from '@wordpress/deprecated';\nimport {\n\tparse,\n\tsynchronizeBlocksWithTemplate,\n\t__unstableSerializeAndClean,\n} from '@wordpress/blocks';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport {\n\tapplyFilters,\n\tapplyFiltersAsync,\n\tdoActionAsync,\n} from '@wordpress/hooks';\nimport { store as preferencesStore } from '@wordpress/preferences';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { TRASH_POST_NOTICE_ID } from './constants';\nimport { localAutosaveSet } from './local-autosave';\nimport {\n\tgetNotificationArgumentsForSaveSuccess,\n\tgetNotificationArgumentsForSaveFail,\n\tgetNotificationArgumentsForTrashFail,\n} from './utils/notice-builder';\nimport { unlock } from '../lock-unlock';\n/**\n * Returns an action generator used in signalling that editor has initialized with\n * the specified post object and editor settings.\n *\n * @param {Object} post     Post object.\n * @param {Object} edits    Initial edited attributes object.\n * @param {Array?} template Block Template.\n */\nexport const setupEditor =\n\t( post, edits, template ) =>\n\t( { dispatch } ) => {\n\t\tdispatch.setEditedPost( post.type, post.id );\n\t\t// Apply a template for new posts only, if exists.\n\t\tconst isNewPost = post.status === 'auto-draft';\n\t\tif ( isNewPost && template ) {\n\t\t\t// In order to ensure maximum of a single parse during setup, edits are\n\t\t\t// included as part of editor setup action. Assume edited content as\n\t\t\t// canonical if provided, falling back to post.\n\t\t\tlet content;\n\t\t\tif ( 'content' in edits ) {\n\t\t\t\tcontent = edits.content;\n\t\t\t} else {\n\t\t\t\tcontent = post.content.raw;\n\t\t\t}\n\t\t\tlet blocks = parse( content );\n\t\t\tblocks = synchronizeBlocksWithTemplate( blocks, template );\n\t\t\tdispatch.resetEditorBlocks( blocks, {\n\t\t\t\t__unstableShouldCreateUndoLevel: false,\n\t\t\t} );\n\t\t}\n\t\tif (\n\t\t\tedits &&\n\t\t\tObject.values( edits ).some(\n\t\t\t\t( [ key, edit ] ) =>\n\t\t\t\t\tedit !== ( post[ key ]?.raw ?? post[ key ] )\n\t\t\t)\n\t\t) {\n\t\t\tdispatch.editPost( edits );\n\t\t}\n\t};\n\n/**\n * Returns an action object signalling that the editor is being destroyed and\n * that any necessary state or side-effect cleanup should occur.\n *\n * @deprecated\n *\n * @return {Object} Action object.\n */\nexport function __experimentalTearDownEditor() {\n\tdeprecated(\n\t\t\"wp.data.dispatch( 'core/editor' ).__experimentalTearDownEditor\",\n\t\t{\n\t\t\tsince: '6.5',\n\t\t}\n\t);\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Returns an action object used in signalling that the latest version of the\n * post has been received, either by initialization or save.\n *\n * @deprecated Since WordPress 6.0.\n */\nexport function resetPost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).resetPost\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Initialize the editor with the setupEditorState action',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Returns an action object used in signalling that a patch of updates for the\n * latest version of the post have been received.\n *\n * @return {Object} Action object.\n * @deprecated since Gutenberg 9.7.0.\n */\nexport function updatePost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).updatePost\", {\n\t\tsince: '5.7',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Setup the editor state.\n *\n * @deprecated\n *\n * @param {Object} post Post object.\n */\nexport function setupEditorState( post ) {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).setupEditorState\", {\n\t\tsince: '6.5',\n\t\talternative: \"wp.data.dispatch( 'core/editor' ).setEditedPost\",\n\t} );\n\treturn setEditedPost( post.type, post.id );\n}\n\n/**\n * Returns an action that sets the current post Type and post ID.\n *\n * @param {string} postType Post Type.\n * @param {string} postId   Post ID.\n *\n * @return {Object} Action object.\n */\nexport function setEditedPost( postType, postId ) {\n\treturn {\n\t\ttype: 'SET_EDITED_POST',\n\t\tpostType,\n\t\tpostId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that attributes of the post have\n * been edited.\n *\n * @param {Object} edits   Post attributes to edit.\n * @param {Object} options Options for the edit.\n *\n * @example\n * ```js\n * // Update the post title\n * wp.data.dispatch( 'core/editor' ).editPost( { title: `${ newTitle }` } );\n * ```\n *\n * @example\n *```js\n * \t// Get specific media size based on the featured media ID\n * \t// Note: change sizes?.large for any registered size\n * \tconst getFeaturedMediaUrl = useSelect( ( select ) => {\n * \t\tconst getFeaturedMediaId =\n * \t\t\tselect( 'core/editor' ).getEditedPostAttribute( 'featured_media' );\n * \t\tconst getMedia = select( 'core' ).getMedia( getFeaturedMediaId );\n *\n * \t\treturn (\n * \t\t\tgetMedia?.media_details?.sizes?.large?.source_url || getMedia?.source_url || ''\n * \t\t);\n * }, [] );\n * ```\n *\n * @return {Object} Action object\n */\nexport const editPost =\n\t( edits, options ) =>\n\t( { select, registry } ) => {\n\t\tconst { id, type } = select.getCurrentPost();\n\t\tregistry\n\t\t\t.dispatch( coreStore )\n\t\t\t.editEntityRecord( 'postType', type, id, edits, options );\n\t};\n\n/**\n * Action for saving the current post in the editor.\n *\n * @param {Object} options\n */\nexport const savePost =\n\t( options = {} ) =>\n\tasync ( { select, dispatch, registry } ) => {\n\t\tif ( ! select.isEditedPostSaveable() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst content = select.getEditedPostContent();\n\n\t\tif ( ! options.isAutosave ) {\n\t\t\tdispatch.editPost( { content }, { undoIgnore: true } );\n\t\t}\n\n\t\tconst previousRecord = select.getCurrentPost();\n\t\tlet edits = {\n\t\t\tid: previousRecord.id,\n\t\t\t...registry\n\t\t\t\t.select( coreStore )\n\t\t\t\t.getEntityRecordNonTransientEdits(\n\t\t\t\t\t'postType',\n\t\t\t\t\tpreviousRecord.type,\n\t\t\t\t\tpreviousRecord.id\n\t\t\t\t),\n\t\t\tcontent,\n\t\t};\n\t\tdispatch( { type: 'REQUEST_POST_UPDATE_START', options } );\n\n\t\tlet error = false;\n\t\ttry {\n\t\t\tedits = await applyFiltersAsync(\n\t\t\t\t'editor.preSavePost',\n\t\t\t\tedits,\n\t\t\t\toptions\n\t\t\t);\n\t\t} catch ( err ) {\n\t\t\terror = err;\n\t\t}\n\n\t\tif ( ! error ) {\n\t\t\ttry {\n\t\t\t\tawait registry\n\t\t\t\t\t.dispatch( coreStore )\n\t\t\t\t\t.saveEntityRecord(\n\t\t\t\t\t\t'postType',\n\t\t\t\t\t\tpreviousRecord.type,\n\t\t\t\t\t\tedits,\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t} catch ( err ) {\n\t\t\t\terror =\n\t\t\t\t\terr.message && err.code !== 'unknown_error'\n\t\t\t\t\t\t? err.message\n\t\t\t\t\t\t: __( 'An error occurred while updating.' );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! error ) {\n\t\t\terror = registry\n\t\t\t\t.select( coreStore )\n\t\t\t\t.getLastEntitySaveError(\n\t\t\t\t\t'postType',\n\t\t\t\t\tpreviousRecord.type,\n\t\t\t\t\tpreviousRecord.id\n\t\t\t\t);\n\t\t}\n\n\t\t// Run the hook with legacy unstable name for backward compatibility\n\t\tif ( ! error ) {\n\t\t\ttry {\n\t\t\t\tawait applyFilters(\n\t\t\t\t\t'editor.__unstableSavePost',\n\t\t\t\t\tPromise.resolve(),\n\t\t\t\t\toptions\n\t\t\t\t);\n\t\t\t} catch ( err ) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t}\n\n\t\tif ( ! error ) {\n\t\t\ttry {\n\t\t\t\tawait doActionAsync(\n\t\t\t\t\t'editor.savePost',\n\t\t\t\t\t{ id: previousRecord.id },\n\t\t\t\t\toptions\n\t\t\t\t);\n\t\t\t} catch ( err ) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t}\n\t\tdispatch( { type: 'REQUEST_POST_UPDATE_FINISH', options } );\n\n\t\tif ( error ) {\n\t\t\tconst args = getNotificationArgumentsForSaveFail( {\n\t\t\t\tpost: previousRecord,\n\t\t\t\tedits,\n\t\t\t\terror,\n\t\t\t} );\n\t\t\tif ( args.length ) {\n\t\t\t\tregistry.dispatch( noticesStore ).createErrorNotice( ...args );\n\t\t\t}\n\t\t} else {\n\t\t\tconst updatedRecord = select.getCurrentPost();\n\t\t\tconst args = getNotificationArgumentsForSaveSuccess( {\n\t\t\t\tpreviousPost: previousRecord,\n\t\t\t\tpost: updatedRecord,\n\t\t\t\tpostType: await registry\n\t\t\t\t\t.resolveSelect( coreStore )\n\t\t\t\t\t.getPostType( updatedRecord.type ),\n\t\t\t\toptions,\n\t\t\t} );\n\t\t\tif ( args.length ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t\t.createSuccessNotice( ...args );\n\t\t\t}\n\t\t\t// Make sure that any edits after saving create an undo level and are\n\t\t\t// considered for change detection.\n\t\t\tif ( ! options.isAutosave ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t\t.__unstableMarkLastChangeAsPersistent();\n\t\t\t}\n\t\t}\n\t};\n\n/**\n * Action for refreshing the current post.\n *\n * @deprecated Since WordPress 6.0.\n */\nexport function refreshPost() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).refreshPost\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Action for trashing the current post in the editor.\n */\nexport const trashPost =\n\t() =>\n\tasync ( { select, dispatch, registry } ) => {\n\t\tconst postTypeSlug = select.getCurrentPostType();\n\t\tconst postType = await registry\n\t\t\t.resolveSelect( coreStore )\n\t\t\t.getPostType( postTypeSlug );\n\t\tregistry.dispatch( noticesStore ).removeNotice( TRASH_POST_NOTICE_ID );\n\t\tconst { rest_base: restBase, rest_namespace: restNamespace = 'wp/v2' } =\n\t\t\tpostType;\n\t\tdispatch( { type: 'REQUEST_POST_DELETE_START' } );\n\t\ttry {\n\t\t\tconst post = select.getCurrentPost();\n\t\t\tawait apiFetch( {\n\t\t\t\tpath: `/${ restNamespace }/${ restBase }/${ post.id }`,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t} );\n\n\t\t\tawait dispatch.savePost();\n\t\t} catch ( error ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t.createErrorNotice(\n\t\t\t\t\t...getNotificationArgumentsForTrashFail( { error } )\n\t\t\t\t);\n\t\t}\n\t\tdispatch( { type: 'REQUEST_POST_DELETE_FINISH' } );\n\t};\n\n/**\n * Action that autosaves the current post.  This\n * includes server-side autosaving (default) and client-side (a.k.a. local)\n * autosaving (e.g. on the Web, the post might be committed to Session\n * Storage).\n *\n * @param {Object?} options Extra flags to identify the autosave.\n */\nexport const autosave =\n\t( { local = false, ...options } = {} ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tconst post = select.getCurrentPost();\n\n\t\t// Currently template autosaving is not supported.\n\t\tif ( post.type === 'wp_template' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( local ) {\n\t\t\tconst isPostNew = select.isEditedPostNew();\n\t\t\tconst title = select.getEditedPostAttribute( 'title' );\n\t\t\tconst content = select.getEditedPostAttribute( 'content' );\n\t\t\tconst excerpt = select.getEditedPostAttribute( 'excerpt' );\n\t\t\tlocalAutosaveSet( post.id, isPostNew, title, content, excerpt );\n\t\t} else {\n\t\t\tawait dispatch.savePost( { isAutosave: true, ...options } );\n\t\t}\n\t};\n\nexport const __unstableSaveForPreview =\n\t( { forceIsAutosaveable } = {} ) =>\n\tasync ( { select, dispatch } ) => {\n\t\tif (\n\t\t\t( forceIsAutosaveable || select.isEditedPostAutosaveable() ) &&\n\t\t\t! select.isPostLocked()\n\t\t) {\n\t\t\tconst isDraft = [ 'draft', 'auto-draft' ].includes(\n\t\t\t\tselect.getEditedPostAttribute( 'status' )\n\t\t\t);\n\t\t\tif ( isDraft ) {\n\t\t\t\tawait dispatch.savePost( { isPreview: true } );\n\t\t\t} else {\n\t\t\t\tawait dispatch.autosave( { isPreview: true } );\n\t\t\t}\n\t\t}\n\n\t\treturn select.getEditedPostPreviewLink();\n\t};\n\n/**\n * Action that restores last popped state in undo history.\n */\nexport const redo =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry.dispatch( coreStore ).redo();\n\t};\n\n/**\n * Action that pops a record from undo history and undoes the edit.\n */\nexport const undo =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry.dispatch( coreStore ).undo();\n\t};\n\n/**\n * Action that creates an undo history record.\n *\n * @deprecated Since WordPress 6.0\n */\nexport function createUndoLevel() {\n\tdeprecated( \"wp.data.dispatch( 'core/editor' ).createUndoLevel\", {\n\t\tsince: '6.0',\n\t\tversion: '6.3',\n\t\talternative: 'Use the core entities store instead',\n\t} );\n\treturn { type: 'DO_NOTHING' };\n}\n\n/**\n * Action that locks the editor.\n *\n * @param {Object} lock Details about the post lock status, user, and nonce.\n * @return {Object} Action object.\n */\nexport function updatePostLock( lock ) {\n\treturn {\n\t\ttype: 'UPDATE_POST_LOCK',\n\t\tlock,\n\t};\n}\n\n/**\n * Enable the publish sidebar.\n */\nexport const enablePublishSidebar =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'isPublishSidebarEnabled', true );\n\t};\n\n/**\n * Disables the publish sidebar.\n */\nexport const disablePublishSidebar =\n\t() =>\n\t( { registry } ) => {\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'isPublishSidebarEnabled', false );\n\t};\n\n/**\n * Action that locks post saving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * const { subscribe } = wp.data;\n *\n * const initialPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n *\n * // Only allow publishing posts that are set to a future date.\n * if ( 'publish' !== initialPostStatus ) {\n *\n * \t// Track locking.\n * \tlet locked = false;\n *\n * \t// Watch for the publish event.\n * \tlet unssubscribe = subscribe( () => {\n * \t\tconst currentPostStatus = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'status' );\n * \t\tif ( 'publish' !== currentPostStatus ) {\n *\n * \t\t\t// Compare the post date to the current date, lock the post if the date isn't in the future.\n * \t\t\tconst postDate = new Date( wp.data.select( 'core/editor' ).getEditedPostAttribute( 'date' ) );\n * \t\t\tconst currentDate = new Date();\n * \t\t\tif ( postDate.getTime() <= currentDate.getTime() ) {\n * \t\t\t\tif ( ! locked ) {\n * \t\t\t\t\tlocked = true;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).lockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t} else {\n * \t\t\t\tif ( locked ) {\n * \t\t\t\t\tlocked = false;\n * \t\t\t\t\twp.data.dispatch( 'core/editor' ).unlockPostSaving( 'futurelock' );\n * \t\t\t\t}\n * \t\t\t}\n * \t\t}\n * \t} );\n * }\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that unlocks post saving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostSaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_SAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that locks post autosaving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Lock post autosaving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).lockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function lockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'LOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Action that unlocks post autosaving.\n *\n * @param {string} lockName The lock name.\n *\n * @example\n * ```\n * // Unlock post saving with the lock key `mylock`:\n * wp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n * ```\n *\n * @return {Object} Action object\n */\nexport function unlockPostAutosaving( lockName ) {\n\treturn {\n\t\ttype: 'UNLOCK_POST_AUTOSAVING',\n\t\tlockName,\n\t};\n}\n\n/**\n * Returns an action object used to signal that the blocks have been updated.\n *\n * @param {Array}   blocks  Block Array.\n * @param {?Object} options Optional options.\n */\nexport const resetEditorBlocks =\n\t( blocks, options = {} ) =>\n\t( { select, dispatch, registry } ) => {\n\t\tconst { __unstableShouldCreateUndoLevel, selection } = options;\n\t\tconst edits = { blocks, selection };\n\n\t\tif ( __unstableShouldCreateUndoLevel !== false ) {\n\t\t\tconst { id, type } = select.getCurrentPost();\n\t\t\tconst noChange =\n\t\t\t\tregistry\n\t\t\t\t\t.select( coreStore )\n\t\t\t\t\t.getEditedEntityRecord( 'postType', type, id ).blocks ===\n\t\t\t\tedits.blocks;\n\t\t\tif ( noChange ) {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( coreStore )\n\t\t\t\t\t.__unstableCreateUndoLevel( 'postType', type, id );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We create a new function here on every persistent edit\n\t\t\t// to make sure the edit makes the post dirty and creates\n\t\t\t// a new undo level.\n\t\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\t\t}\n\n\t\tdispatch.editPost( edits );\n\t};\n\n/*\n * Returns an action object used in signalling that the post editor settings have been updated.\n *\n * @param {Object} settings Updated settings\n *\n * @return {Object} Action object\n */\nexport function updateEditorSettings( settings ) {\n\treturn {\n\t\ttype: 'UPDATE_EDITOR_SETTINGS',\n\t\tsettings,\n\t};\n}\n\n/**\n * Returns an action used to set the rendering mode of the post editor. We support multiple rendering modes:\n *\n * -   `post-only`: This mode extracts the post blocks from the template and renders only those. The idea is to allow the user to edit the post/page in isolation without the wrapping template.\n * -   `template-locked`: This mode renders both the template and the post blocks but the template blocks are locked and can't be edited. The post blocks are editable.\n *\n * @param {string} mode Mode (one of 'post-only' or 'template-locked').\n */\nexport const setRenderingMode =\n\t( mode ) =>\n\t( { dispatch, registry, select } ) => {\n\t\tif ( select.__unstableIsEditorReady() ) {\n\t\t\t// We clear the block selection but we also need to clear the selection from the core store.\n\t\t\tregistry.dispatch( blockEditorStore ).clearSelectedBlock();\n\t\t\tdispatch.editPost( { selection: undefined }, { undoIgnore: true } );\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'SET_RENDERING_MODE',\n\t\t\tmode,\n\t\t} );\n\t};\n\n/**\n * Action that changes the width of the editing canvas.\n *\n * @param {string} deviceType\n *\n * @return {Object} Action object.\n */\nexport function setDeviceType( deviceType ) {\n\treturn {\n\t\ttype: 'SET_DEVICE_TYPE',\n\t\tdeviceType,\n\t};\n}\n\n/**\n * Returns an action object used to enable or disable a panel in the editor.\n *\n * @param {string} panelName A string that identifies the panel to enable or disable.\n *\n * @return {Object} Action object.\n */\nexport const toggleEditorPanelEnabled =\n\t( panelName ) =>\n\t( { registry } ) => {\n\t\tconst inactivePanels =\n\t\t\tregistry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core', 'inactivePanels' ) ?? [];\n\n\t\tconst isPanelInactive = !! inactivePanels?.includes( panelName );\n\n\t\t// If the panel is inactive, remove it to enable it, else add it to\n\t\t// make it inactive.\n\t\tlet updatedInactivePanels;\n\t\tif ( isPanelInactive ) {\n\t\t\tupdatedInactivePanels = inactivePanels.filter(\n\t\t\t\t( invactivePanelName ) => invactivePanelName !== panelName\n\t\t\t);\n\t\t} else {\n\t\t\tupdatedInactivePanels = [ ...inactivePanels, panelName ];\n\t\t}\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'inactivePanels', updatedInactivePanels );\n\t};\n\n/**\n * Opens a closed panel and closes an open panel.\n *\n * @param {string} panelName A string that identifies the panel to open or close.\n */\nexport const toggleEditorPanelOpened =\n\t( panelName ) =>\n\t( { registry } ) => {\n\t\tconst openPanels =\n\t\t\tregistry.select( preferencesStore ).get( 'core', 'openPanels' ) ??\n\t\t\t[];\n\n\t\tconst isPanelOpen = !! openPanels?.includes( panelName );\n\n\t\t// If the panel is open, remove it to close it, else add it to\n\t\t// make it open.\n\t\tlet updatedOpenPanels;\n\t\tif ( isPanelOpen ) {\n\t\t\tupdatedOpenPanels = openPanels.filter(\n\t\t\t\t( openPanelName ) => openPanelName !== panelName\n\t\t\t);\n\t\t} else {\n\t\t\tupdatedOpenPanels = [ ...openPanels, panelName ];\n\t\t}\n\n\t\tregistry\n\t\t\t.dispatch( preferencesStore )\n\t\t\t.set( 'core', 'openPanels', updatedOpenPanels );\n\t};\n\n/**\n * Returns an action object used to remove a panel from the editor.\n *\n * @param {string} panelName A string that identifies the panel to remove.\n *\n * @return {Object} Action object.\n */\nexport function removeEditorPanel( panelName ) {\n\treturn {\n\t\ttype: 'REMOVE_PANEL',\n\t\tpanelName,\n\t};\n}\n\n/**\n * Returns an action object used to open/close the inserter.\n *\n * @param {boolean|Object} value                Whether the inserter should be\n *                                              opened (true) or closed (false).\n *                                              To specify an insertion point,\n *                                              use an object.\n * @param {string}         value.rootClientId   The root client ID to insert at.\n * @param {number}         value.insertionIndex The index to insert at.\n * @param {string}         value.filterValue    A query to filter the inserter results.\n * @param {Function}       value.onSelect       A callback when an item is selected.\n * @param {string}         value.tab            The tab to open in the inserter.\n * @param {string}         value.category       The category to initialize in the inserter.\n *\n * @return {Object} Action object.\n */\nexport const setIsInserterOpened =\n\t( value ) =>\n\t( { dispatch, registry } ) => {\n\t\tif (\n\t\t\ttypeof value === 'object' &&\n\t\t\tvalue.hasOwnProperty( 'rootClientId' ) &&\n\t\t\tvalue.hasOwnProperty( 'insertionIndex' )\n\t\t) {\n\t\t\tunlock( registry.dispatch( blockEditorStore ) ).setInsertionPoint( {\n\t\t\t\trootClientId: value.rootClientId,\n\t\t\t\tindex: value.insertionIndex,\n\t\t\t} );\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'SET_IS_INSERTER_OPENED',\n\t\t\tvalue,\n\t\t} );\n\t};\n\n/**\n * Returns an action object used to open/close the list view.\n *\n * @param {boolean} isOpen A boolean representing whether the list view should be opened or closed.\n * @return {Object} Action object.\n */\nexport function setIsListViewOpened( isOpen ) {\n\treturn {\n\t\ttype: 'SET_IS_LIST_VIEW_OPENED',\n\t\tisOpen,\n\t};\n}\n\n/**\n * Action that toggles Distraction free mode.\n * Distraction free mode expects there are no sidebars, as due to the\n * z-index values set, you can't close sidebars.\n */\nexport const toggleDistractionFree =\n\t() =>\n\t( { dispatch, registry } ) => {\n\t\tconst isDistractionFree = registry\n\t\t\t.select( preferencesStore )\n\t\t\t.get( 'core', 'distractionFree' );\n\t\tif ( isDistractionFree ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t.set( 'core', 'fixedToolbar', false );\n\t\t}\n\t\tif ( ! isDistractionFree ) {\n\t\t\tregistry.batch( () => {\n\t\t\t\tregistry\n\t\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t\t.set( 'core', 'fixedToolbar', true );\n\t\t\t\tdispatch.setIsInserterOpened( false );\n\t\t\t\tdispatch.setIsListViewOpened( false );\n\t\t\t} );\n\t\t}\n\t\tregistry.batch( () => {\n\t\t\tregistry\n\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t.set( 'core', 'distractionFree', ! isDistractionFree );\n\t\t\tregistry\n\t\t\t\t.dispatch( noticesStore )\n\t\t\t\t.createInfoNotice(\n\t\t\t\t\tisDistractionFree\n\t\t\t\t\t\t? __( 'Distraction free off.' )\n\t\t\t\t\t\t: __( 'Distraction free on.' ),\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'core/editor/distraction-free-mode/notice',\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: __( 'Undo' ),\n\t\t\t\t\t\t\t\tonClick: () => {\n\t\t\t\t\t\t\t\t\tregistry.batch( () => {\n\t\t\t\t\t\t\t\t\t\tregistry\n\t\t\t\t\t\t\t\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t\t\t\t\t\t\t\t.set(\n\t\t\t\t\t\t\t\t\t\t\t\t'core',\n\t\t\t\t\t\t\t\t\t\t\t\t'fixedToolbar',\n\t\t\t\t\t\t\t\t\t\t\t\tisDistractionFree ? true : false\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tregistry\n\t\t\t\t\t\t\t\t\t\t\t.dispatch( preferencesStore )\n\t\t\t\t\t\t\t\t\t\t\t.toggle(\n\t\t\t\t\t\t\t\t\t\t\t\t'core',\n\t\t\t\t\t\t\t\t\t\t\t\t'distractionFree'\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t} );\n\t};\n\n/**\n * Triggers an action used to switch editor mode.\n *\n * @param {string} mode The editor mode.\n */\nexport const switchEditorMode =\n\t( mode ) =>\n\t( { dispatch, registry } ) => {\n\t\tregistry.dispatch( preferencesStore ).set( 'core', 'editorMode', mode );\n\n\t\t// Unselect blocks when we switch to a non visual mode.\n\t\tif ( mode !== 'visual' ) {\n\t\t\tregistry.dispatch( blockEditorStore ).clearSelectedBlock();\n\t\t}\n\n\t\tif ( mode === 'visual' ) {\n\t\t\tspeak( __( 'Visual editor selected' ), 'assertive' );\n\t\t} else if ( mode === 'text' ) {\n\t\t\tconst isDistractionFree = registry\n\t\t\t\t.select( preferencesStore )\n\t\t\t\t.get( 'core', 'distractionFree' );\n\t\t\tif ( isDistractionFree ) {\n\t\t\t\tdispatch.toggleDistractionFree();\n\t\t\t}\n\t\t\tspeak( __( 'Code editor selected' ), 'assertive' );\n\t\t}\n\t};\n\n/**\n * Returns an action object used in signalling that the user opened the publish\n * sidebar.\n *\n * @return {Object} Action object\n */\nexport function openPublishSidebar() {\n\treturn {\n\t\ttype: 'OPEN_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user closed the\n * publish sidebar.\n *\n * @return {Object} Action object.\n */\nexport function closePublishSidebar() {\n\treturn {\n\t\ttype: 'CLOSE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the user toggles the publish sidebar.\n *\n * @return {Object} Action object\n */\nexport function togglePublishSidebar() {\n\treturn {\n\t\ttype: 'TOGGLE_PUBLISH_SIDEBAR',\n\t};\n}\n\n/**\n * Backward compatibility\n */\n\nconst getBlockEditorAction =\n\t( name ) =>\n\t( ...args ) =>\n\t( { registry } ) => {\n\t\tdeprecated( \"`wp.data.dispatch( 'core/editor' ).\" + name + '`', {\n\t\t\tsince: '5.3',\n\t\t\talternative:\n\t\t\t\t\"`wp.data.dispatch( 'core/block-editor' ).\" + name + '`',\n\t\t\tversion: '6.2',\n\t\t} );\n\t\tregistry.dispatch( blockEditorStore )[ name ]( ...args );\n\t};\n\n/**\n * @see resetBlocks in core/block-editor store.\n */\nexport const resetBlocks = getBlockEditorAction( 'resetBlocks' );\n\n/**\n * @see receiveBlocks in core/block-editor store.\n */\nexport const receiveBlocks = getBlockEditorAction( 'receiveBlocks' );\n\n/**\n * @see updateBlock in core/block-editor store.\n */\nexport const updateBlock = getBlockEditorAction( 'updateBlock' );\n\n/**\n * @see updateBlockAttributes in core/block-editor store.\n */\nexport const updateBlockAttributes = getBlockEditorAction(\n\t'updateBlockAttributes'\n);\n\n/**\n * @see selectBlock in core/block-editor store.\n */\nexport const selectBlock = getBlockEditorAction( 'selectBlock' );\n\n/**\n * @see startMultiSelect in core/block-editor store.\n */\nexport const startMultiSelect = getBlockEditorAction( 'startMultiSelect' );\n\n/**\n * @see stopMultiSelect in core/block-editor store.\n */\nexport const stopMultiSelect = getBlockEditorAction( 'stopMultiSelect' );\n\n/**\n * @see multiSelect in core/block-editor store.\n */\nexport const multiSelect = getBlockEditorAction( 'multiSelect' );\n\n/**\n * @see clearSelectedBlock in core/block-editor store.\n */\nexport const clearSelectedBlock = getBlockEditorAction( 'clearSelectedBlock' );\n\n/**\n * @see toggleSelection in core/block-editor store.\n */\nexport const toggleSelection = getBlockEditorAction( 'toggleSelection' );\n\n/**\n * @see replaceBlocks in core/block-editor store.\n */\nexport const replaceBlocks = getBlockEditorAction( 'replaceBlocks' );\n\n/**\n * @see replaceBlock in core/block-editor store.\n */\nexport const replaceBlock = getBlockEditorAction( 'replaceBlock' );\n\n/**\n * @see moveBlocksDown in core/block-editor store.\n */\nexport const moveBlocksDown = getBlockEditorAction( 'moveBlocksDown' );\n\n/**\n * @see moveBlocksUp in core/block-editor store.\n */\nexport const moveBlocksUp = getBlockEditorAction( 'moveBlocksUp' );\n\n/**\n * @see moveBlockToPosition in core/block-editor store.\n */\nexport const moveBlockToPosition = getBlockEditorAction(\n\t'moveBlockToPosition'\n);\n\n/**\n * @see insertBlock in core/block-editor store.\n */\nexport const insertBlock = getBlockEditorAction( 'insertBlock' );\n\n/**\n * @see insertBlocks in core/block-editor store.\n */\nexport const insertBlocks = getBlockEditorAction( 'insertBlocks' );\n\n/**\n * @see showInsertionPoint in core/block-editor store.\n */\nexport const showInsertionPoint = getBlockEditorAction( 'showInsertionPoint' );\n\n/**\n * @see hideInsertionPoint in core/block-editor store.\n */\nexport const hideInsertionPoint = getBlockEditorAction( 'hideInsertionPoint' );\n\n/**\n * @see setTemplateValidity in core/block-editor store.\n */\nexport const setTemplateValidity = getBlockEditorAction(\n\t'setTemplateValidity'\n);\n\n/**\n * @see synchronizeTemplate in core/block-editor store.\n */\nexport const synchronizeTemplate = getBlockEditorAction(\n\t'synchronizeTemplate'\n);\n\n/**\n * @see mergeBlocks in core/block-editor store.\n */\nexport const mergeBlocks = getBlockEditorAction( 'mergeBlocks' );\n\n/**\n * @see removeBlocks in core/block-editor store.\n */\nexport const removeBlocks = getBlockEditorAction( 'removeBlocks' );\n\n/**\n * @see removeBlock in core/block-editor store.\n */\nexport const removeBlock = getBlockEditorAction( 'removeBlock' );\n\n/**\n * @see toggleBlockMode in core/block-editor store.\n */\nexport const toggleBlockMode = getBlockEditorAction( 'toggleBlockMode' );\n\n/**\n * @see startTyping in core/block-editor store.\n */\nexport const startTyping = getBlockEditorAction( 'startTyping' );\n\n/**\n * @see stopTyping in core/block-editor store.\n */\nexport const stopTyping = getBlockEditorAction( 'stopTyping' );\n\n/**\n * @see enterFormattedText in core/block-editor store.\n */\nexport const enterFormattedText = getBlockEditorAction( 'enterFormattedText' );\n\n/**\n * @see exitFormattedText in core/block-editor store.\n */\nexport const exitFormattedText = getBlockEditorAction( 'exitFormattedText' );\n\n/**\n * @see insertDefaultBlock in core/block-editor store.\n */\nexport const insertDefaultBlock = getBlockEditorAction( 'insertDefaultBlock' );\n\n/**\n * @see updateBlockListSettings in core/block-editor store.\n */\nexport const updateBlockListSettings = getBlockEditorAction(\n\t'updateBlockListSettings'\n);\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmF,cAAcA,CAAEC,IAAI,EAAG;EACtC,OAAO;IACNpF,IAAI,EAAE,kBAAkB;IACxBoF;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAChCA,CAAA,KACA,CAAE;EAAE1D;AAAS,CAAC,KAAM;EACnBA,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CAAE,MAAM,EAAE,yBAAyB,EAAE,IAAK,CAAC;AACjD,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GACjCA,CAAA,KACA,CAAE;EAAE5D;AAAS,CAAC,KAAM;EACnBA,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CAAE,MAAM,EAAE,yBAAyB,EAAE,KAAM,CAAC;AAClD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAcA,CAAEC,QAAQ,EAAG;EAC1C,OAAO;IACNzF,IAAI,EAAE,kBAAkB;IACxByF;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAAED,QAAQ,EAAG;EAC5C,OAAO;IACNzF,IAAI,EAAE,oBAAoB;IAC1ByF;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,kBAAkBA,CAAEF,QAAQ,EAAG;EAC9C,OAAO;IACNzF,IAAI,EAAE,sBAAsB;IAC5ByF;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,oBAAoBA,CAAEH,QAAQ,EAAG;EAChD,OAAO;IACNzF,IAAI,EAAE,wBAAwB;IAC9ByF;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMlF,iBAAiB,GAC7BA,CAAED,MAAM,EAAEmB,OAAO,GAAG,CAAC,CAAC,KACtB,CAAE;EAAEC,MAAM;EAAE5B,QAAQ;EAAE6B;AAAS,CAAC,KAAM;EACrC,MAAM;IAAEnB,+BAA+B;IAAEqF;EAAU,CAAC,GAAGpE,OAAO;EAC9D,MAAM7B,KAAK,GAAG;IAAEU,MAAM;IAAEuF;EAAU,CAAC;EAEnC,IAAKrF,+BAA+B,KAAK,KAAK,EAAG;IAChD,MAAM;MAAEP,EAAE;MAAED;IAAK,CAAC,GAAG0B,MAAM,CAACE,cAAc,CAAC,CAAC;IAC5C,MAAMkE,QAAQ,GACbnE,QAAQ,CACND,MAAM,CAAE7C,SAAU,CAAC,CACnBkH,qBAAqB,CAAE,UAAU,EAAE/F,IAAI,EAAEC,EAAG,CAAC,CAACK,MAAM,KACtDV,KAAK,CAACU,MAAM;IACb,IAAKwF,QAAQ,EAAG;MACfnE,QAAQ,CACN7B,QAAQ,CAAEjB,SAAU,CAAC,CACrBmH,yBAAyB,CAAE,UAAU,EAAEhG,IAAI,EAAEC,EAAG,CAAC;MACnD;IACD;;IAEA;IACA;IACA;IACAL,KAAK,CAACQ,OAAO,GAAG,CAAE;MAAEE,MAAM,EAAE2F,sBAAsB,GAAG;IAAG,CAAC,KACxDvH,2BAA2B,CAAEuH,sBAAuB,CAAC;EACvD;EAEAnG,QAAQ,CAACiB,QAAQ,CAAEnB,KAAM,CAAC;AAC3B,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsG,oBAAoBA,CAAEC,QAAQ,EAAG;EAChD,OAAO;IACNnG,IAAI,EAAE,wBAAwB;IAC9BmG;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAC1BC,IAAI,IACN,CAAE;EAAEvG,QAAQ;EAAE6B,QAAQ;EAAED;AAAO,CAAC,KAAM;EACrC,IAAKA,MAAM,CAAC4E,uBAAuB,CAAC,CAAC,EAAG;IACvC;IACA3E,QAAQ,CAAC7B,QAAQ,CAAEhB,gBAAiB,CAAC,CAACyH,kBAAkB,CAAC,CAAC;IAC1DzG,QAAQ,CAACiB,QAAQ,CAAE;MAAE8E,SAAS,EAAEW;IAAU,CAAC,EAAE;MAAEtE,UAAU,EAAE;IAAK,CAAE,CAAC;EACpE;EAEApC,QAAQ,CAAE;IACTE,IAAI,EAAE,oBAAoB;IAC1BqG;EACD,CAAE,CAAC;AACJ,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,aAAaA,CAAEC,UAAU,EAAG;EAC3C,OAAO;IACN1G,IAAI,EAAE,iBAAiB;IACvB0G;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,wBAAwB,GAClCC,SAAS,IACX,CAAE;EAAEjF;AAAS,CAAC,KAAM;EAAA,IAAAkF,oBAAA;EACnB,MAAMC,cAAc,IAAAD,oBAAA,GACnBlF,QAAQ,CACND,MAAM,CAAExC,gBAAiB,CAAC,CAC1B6H,GAAG,CAAE,MAAM,EAAE,gBAAiB,CAAC,cAAAF,oBAAA,cAAAA,oBAAA,GAAI,EAAE;EAExC,MAAMG,eAAe,GAAG,CAAC,CAAEF,cAAc,EAAEjC,QAAQ,CAAE+B,SAAU,CAAC;;EAEhE;EACA;EACA,IAAIK,qBAAqB;EACzB,IAAKD,eAAe,EAAG;IACtBC,qBAAqB,GAAGH,cAAc,CAACI,MAAM,CAC1CC,kBAAkB,IAAMA,kBAAkB,KAAKP,SAClD,CAAC;EACF,CAAC,MAAM;IACNK,qBAAqB,GAAG,CAAE,GAAGH,cAAc,EAAEF,SAAS,CAAE;EACzD;EAEAjF,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CAAE,MAAM,EAAE,gBAAgB,EAAE2B,qBAAsB,CAAC;AACzD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,uBAAuB,GACjCR,SAAS,IACX,CAAE;EAAEjF;AAAS,CAAC,KAAM;EAAA,IAAA0F,qBAAA;EACnB,MAAMC,UAAU,IAAAD,qBAAA,GACf1F,QAAQ,CAACD,MAAM,CAAExC,gBAAiB,CAAC,CAAC6H,GAAG,CAAE,MAAM,EAAE,YAAa,CAAC,cAAAM,qBAAA,cAAAA,qBAAA,GAC/D,EAAE;EAEH,MAAME,WAAW,GAAG,CAAC,CAAED,UAAU,EAAEzC,QAAQ,CAAE+B,SAAU,CAAC;;EAExD;EACA;EACA,IAAIY,iBAAiB;EACrB,IAAKD,WAAW,EAAG;IAClBC,iBAAiB,GAAGF,UAAU,CAACJ,MAAM,CAClCO,aAAa,IAAMA,aAAa,KAAKb,SACxC,CAAC;EACF,CAAC,MAAM;IACNY,iBAAiB,GAAG,CAAE,GAAGF,UAAU,EAAEV,SAAS,CAAE;EACjD;EAEAjF,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CAAE,MAAM,EAAE,YAAY,EAAEkC,iBAAkB,CAAC;AACjD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,iBAAiBA,CAAEd,SAAS,EAAG;EAC9C,OAAO;IACN5G,IAAI,EAAE,cAAc;IACpB4G;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,mBAAmB,GAC7BC,KAAK,IACP,CAAE;EAAE9H,QAAQ;EAAE6B;AAAS,CAAC,KAAM;EAC7B,IACC,OAAOiG,KAAK,KAAK,QAAQ,IACzBA,KAAK,CAACC,cAAc,CAAE,cAAe,CAAC,IACtCD,KAAK,CAACC,cAAc,CAAE,gBAAiB,CAAC,EACvC;IACDpI,MAAM,CAAEkC,QAAQ,CAAC7B,QAAQ,CAAEhB,gBAAiB,CAAE,CAAC,CAACgJ,iBAAiB,CAAE;MAClEC,YAAY,EAAEH,KAAK,CAACG,YAAY;MAChCC,KAAK,EAAEJ,KAAK,CAACK;IACd,CAAE,CAAC;EACJ;EAEAnI,QAAQ,CAAE;IACTE,IAAI,EAAE,wBAAwB;IAC9B4H;EACD,CAAE,CAAC;AACJ,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,mBAAmBA,CAAEC,MAAM,EAAG;EAC7C,OAAO;IACNnI,IAAI,EAAE,yBAAyB;IAC/BmI;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GACjCA,CAAA,KACA,CAAE;EAAEtI,QAAQ;EAAE6B;AAAS,CAAC,KAAM;EAC7B,MAAM0G,iBAAiB,GAAG1G,QAAQ,CAChCD,MAAM,CAAExC,gBAAiB,CAAC,CAC1B6H,GAAG,CAAE,MAAM,EAAE,iBAAkB,CAAC;EAClC,IAAKsB,iBAAiB,EAAG;IACxB1G,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CAAE,MAAM,EAAE,cAAc,EAAE,KAAM,CAAC;EACvC;EACA,IAAK,CAAE+C,iBAAiB,EAAG;IAC1B1G,QAAQ,CAAC2G,KAAK,CAAE,MAAM;MACrB3G,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CAAE,MAAM,EAAE,cAAc,EAAE,IAAK,CAAC;MACrCxF,QAAQ,CAAC6H,mBAAmB,CAAE,KAAM,CAAC;MACrC7H,QAAQ,CAACoI,mBAAmB,CAAE,KAAM,CAAC;IACtC,CAAE,CAAC;EACJ;EACAvG,QAAQ,CAAC2G,KAAK,CAAE,MAAM;IACrB3G,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CAAE,MAAM,EAAE,iBAAiB,EAAE,CAAE+C,iBAAkB,CAAC;IACvD1G,QAAQ,CACN7B,QAAQ,CAAElB,YAAa,CAAC,CACxB2J,gBAAgB,CAChBF,iBAAiB,GACdlJ,EAAE,CAAE,uBAAwB,CAAC,GAC7BA,EAAE,CAAE,sBAAuB,CAAC,EAC/B;MACCc,EAAE,EAAE,0CAA0C;MAC9CD,IAAI,EAAE,UAAU;MAChBwI,OAAO,EAAE,CACR;QACCC,KAAK,EAAEtJ,EAAE,CAAE,MAAO,CAAC;QACnBuJ,OAAO,EAAEA,CAAA,KAAM;UACd/G,QAAQ,CAAC2G,KAAK,CAAE,MAAM;YACrB3G,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5BoG,GAAG,CACH,MAAM,EACN,cAAc,EACd+C,iBAAiB,GAAG,IAAI,GAAG,KAC5B,CAAC;YACF1G,QAAQ,CACN7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAC5ByJ,MAAM,CACN,MAAM,EACN,iBACD,CAAC;UACH,CAAE,CAAC;QACJ;MACD,CAAC;IAEH,CACD,CAAC;EACH,CAAE,CAAC;AACJ,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAC1BvC,IAAI,IACN,CAAE;EAAEvG,QAAQ;EAAE6B;AAAS,CAAC,KAAM;EAC7BA,QAAQ,CAAC7B,QAAQ,CAAEZ,gBAAiB,CAAC,CAACoG,GAAG,CAAE,MAAM,EAAE,YAAY,EAAEe,IAAK,CAAC;;EAEvE;EACA,IAAKA,IAAI,KAAK,QAAQ,EAAG;IACxB1E,QAAQ,CAAC7B,QAAQ,CAAEhB,gBAAiB,CAAC,CAACyH,kBAAkB,CAAC,CAAC;EAC3D;EAEA,IAAKF,IAAI,KAAK,QAAQ,EAAG;IACxBhI,KAAK,CAAEc,EAAE,CAAE,wBAAyB,CAAC,EAAE,WAAY,CAAC;EACrD,CAAC,MAAM,IAAKkH,IAAI,KAAK,MAAM,EAAG;IAC7B,MAAMgC,iBAAiB,GAAG1G,QAAQ,CAChCD,MAAM,CAAExC,gBAAiB,CAAC,CAC1B6H,GAAG,CAAE,MAAM,EAAE,iBAAkB,CAAC;IAClC,IAAKsB,iBAAiB,EAAG;MACxBvI,QAAQ,CAACsI,qBAAqB,CAAC,CAAC;IACjC;IACA/J,KAAK,CAAEc,EAAE,CAAE,sBAAuB,CAAC,EAAE,WAAY,CAAC;EACnD;AACD,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0J,kBAAkBA,CAAA,EAAG;EACpC,OAAO;IACN7I,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS8I,mBAAmBA,CAAA,EAAG;EACrC,OAAO;IACN9I,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS+I,oBAAoBA,CAAA,EAAG;EACtC,OAAO;IACN/I,IAAI,EAAE;EACP,CAAC;AACF;;AAEA;AACA;AACA;;AAEA,MAAMgJ,oBAAoB,GACvBC,IAAI,IACN,CAAE,GAAGpG,IAAI,KACT,CAAE;EAAElB;AAAS,CAAC,KAAM;EACnBpD,UAAU,CAAE,qCAAqC,GAAG0K,IAAI,GAAG,GAAG,EAAE;IAC/DhI,KAAK,EAAE,KAAK;IACZG,WAAW,EACV,2CAA2C,GAAG6H,IAAI,GAAG,GAAG;IACzD9H,OAAO,EAAE;EACV,CAAE,CAAC;EACHQ,QAAQ,CAAC7B,QAAQ,CAAEhB,gBAAiB,CAAC,CAAEmK,IAAI,CAAE,CAAE,GAAGpG,IAAK,CAAC;AACzD,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAMqG,WAAW,GAAGF,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAGH,oBAAoB,CAAE,eAAgB,CAAC;;AAEpE;AACA;AACA;AACA,OAAO,MAAMI,WAAW,GAAGJ,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAMK,qBAAqB,GAAGL,oBAAoB,CACxD,uBACD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMM,WAAW,GAAGN,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAMO,gBAAgB,GAAGP,oBAAoB,CAAE,kBAAmB,CAAC;;AAE1E;AACA;AACA;AACA,OAAO,MAAMQ,eAAe,GAAGR,oBAAoB,CAAE,iBAAkB,CAAC;;AAExE;AACA;AACA;AACA,OAAO,MAAMS,WAAW,GAAGT,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAMzC,kBAAkB,GAAGyC,oBAAoB,CAAE,oBAAqB,CAAC;;AAE9E;AACA;AACA;AACA,OAAO,MAAMU,eAAe,GAAGV,oBAAoB,CAAE,iBAAkB,CAAC;;AAExE;AACA;AACA;AACA,OAAO,MAAMW,aAAa,GAAGX,oBAAoB,CAAE,eAAgB,CAAC;;AAEpE;AACA;AACA;AACA,OAAO,MAAMY,YAAY,GAAGZ,oBAAoB,CAAE,cAAe,CAAC;;AAElE;AACA;AACA;AACA,OAAO,MAAMa,cAAc,GAAGb,oBAAoB,CAAE,gBAAiB,CAAC;;AAEtE;AACA;AACA;AACA,OAAO,MAAMc,YAAY,GAAGd,oBAAoB,CAAE,cAAe,CAAC;;AAElE;AACA;AACA;AACA,OAAO,MAAMe,mBAAmB,GAAGf,oBAAoB,CACtD,qBACD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMgB,WAAW,GAAGhB,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAMiB,YAAY,GAAGjB,oBAAoB,CAAE,cAAe,CAAC;;AAElE;AACA;AACA;AACA,OAAO,MAAMkB,kBAAkB,GAAGlB,oBAAoB,CAAE,oBAAqB,CAAC;;AAE9E;AACA;AACA;AACA,OAAO,MAAMmB,kBAAkB,GAAGnB,oBAAoB,CAAE,oBAAqB,CAAC;;AAE9E;AACA;AACA;AACA,OAAO,MAAMoB,mBAAmB,GAAGpB,oBAAoB,CACtD,qBACD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMqB,mBAAmB,GAAGrB,oBAAoB,CACtD,qBACD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMsB,WAAW,GAAGtB,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAMuB,YAAY,GAAGvB,oBAAoB,CAAE,cAAe,CAAC;;AAElE;AACA;AACA;AACA,OAAO,MAAMwB,WAAW,GAAGxB,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAMyB,eAAe,GAAGzB,oBAAoB,CAAE,iBAAkB,CAAC;;AAExE;AACA;AACA;AACA,OAAO,MAAM0B,WAAW,GAAG1B,oBAAoB,CAAE,aAAc,CAAC;;AAEhE;AACA;AACA;AACA,OAAO,MAAM2B,UAAU,GAAG3B,oBAAoB,CAAE,YAAa,CAAC;;AAE9D;AACA;AACA;AACA,OAAO,MAAM4B,kBAAkB,GAAG5B,oBAAoB,CAAE,oBAAqB,CAAC;;AAE9E;AACA;AACA;AACA,OAAO,MAAM6B,iBAAiB,GAAG7B,oBAAoB,CAAE,mBAAoB,CAAC;;AAE5E;AACA;AACA;AACA,OAAO,MAAM8B,kBAAkB,GAAG9B,oBAAoB,CAAE,oBAAqB,CAAC;;AAE9E;AACA;AACA;AACA,OAAO,MAAM+B,uBAAuB,GAAG/B,oBAAoB,CAC1D,yBACD,CAAC","ignoreList":[]}