{"version":3,"names":["createSelector","createRegistrySelector","addQueryArgs","deprecated","STORE_NAME","getQueriedItems","getQueriedTotalItems","getQueriedTotalPages","DEFAULT_ENTITY_KEY","getNormalizedCommaSeparable","isRawAttribute","setNestedValue","isNumericID","getUserPermissionCacheKey","EMPTY_OBJECT","isRequestingEmbedPreview","select","state","url","isResolving","getAuthors","query","since","alternative","path","getUserQueryResults","getCurrentUser","currentUser","queryID","_state$users$queries$","queryResults","users","queries","map","id","byId","getEntitiesByKind","kind","getEntitiesConfig","entities","config","filter","entity","getEntity","name","getEntityConfig","find","getEntityRecord","key","_query$context","queriedState","records","queriedData","undefined","context","itemIsComplete","items","item","_fields","_getNormalizedCommaSe","filteredItem","fields","f","length","field","split","value","forEach","fieldName","recordId","_query$context2","__unstableNormalizeArgs","args","newArgs","recordKey","Number","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","_record$_key$raw","raw","_query$context3","hasEntityRecords","Array","isArray","getEntityRecords","getEntityRecordsTotalItems","getEntityRecordsTotalPages","per_page","totalItems","Math","ceil","__experimentalGetDirtyEntityRecords","dirtyRecords","primaryKeys","edits","primaryKey","hasEditsForEntityRecord","entityConfig","entityRecord","getEditedEntityRecord","push","title","getTitle","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","saving","isSavingEntityRecord","getEntityRecordEdits","getEntityRecordNonTransientEdits","transientEdits","acc","edited","_query$context4","isAutosavingEntityRecord","_state$entities$recor","pending","isAutosave","Boolean","_state$entities$recor2","isDeletingEntityRecord","_state$entities$recor3","deleting","getLastEntitySaveError","error","getLastEntityDeleteError","getUndoEdit","getRedoEdit","hasUndo","undoManager","hasRedo","getCurrentTheme","currentTheme","__experimentalGetCurrentGlobalStylesId","currentGlobalStylesId","getThemeSupports","_getCurrentTheme$them","theme_supports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","canUser","action","resource","isEntity","userPermissions","canUserEditEntityRecord","getAutosaves","postType","postId","autosaves","getAutosave","authorId","autosave","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","editsReference","__experimentalGetTemplateForLink","link","__experimentalGetCurrentThemeBaseGlobalStyles","themeBaseGlobalStyles","stylesheet","__experimentalGetCurrentThemeGlobalStylesVariations","themeGlobalStyleVariations","getBlockPatterns","blockPatterns","getBlockPatternCategories","blockPatternCategories","getUserPatternCategories","userPatternCategories","getCurrentThemeGlobalStylesRevisions","themeGlobalStyleRevisions","getDefaultTemplateId","defaultTemplates","JSON","stringify","getRevisions","queriedStateRevisions","revisions","getRevision","revisionKey","_query$context5","_getNormalizedCommaSe2","_query$context6"],"sources":["@wordpress/core-data/src/selectors.ts"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport {\n\tgetQueriedItems,\n\tgetQueriedTotalItems,\n\tgetQueriedTotalPages,\n} from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport {\n\tgetNormalizedCommaSeparable,\n\tisRawAttribute,\n\tsetNestedValue,\n\tisNumericID,\n\tgetUserPermissionCacheKey,\n} from './utils';\nimport type * as ET from './entity-types';\nimport type { UndoManager } from '@wordpress/undo-manager';\n\n// This is an incomplete, high-level approximation of the State type.\n// It makes the selectors slightly more safe, but is intended to evolve\n// into a more detailed representation over time.\n// See https://github.com/WordPress/gutenberg/pull/40025#discussion_r865410589 for more context.\nexport interface State {\n\tautosaves: Record< string | number, Array< unknown > >;\n\tblockPatterns: Array< unknown >;\n\tblockPatternCategories: Array< unknown >;\n\tcurrentGlobalStylesId: string;\n\tcurrentTheme: string;\n\tcurrentUser: ET.User< 'edit' >;\n\tembedPreviews: Record< string, { html: string } >;\n\tentities: EntitiesState;\n\tthemeBaseGlobalStyles: Record< string, Object >;\n\tthemeGlobalStyleVariations: Record< string, string >;\n\tthemeGlobalStyleRevisions: Record< number, Object >;\n\tundoManager: UndoManager;\n\tuserPermissions: Record< string, boolean >;\n\tusers: UserState;\n\tnavigationFallbackId: EntityRecordKey;\n\tuserPatternCategories: Array< UserPatternCategory >;\n\tdefaultTemplates: Record< string, string >;\n\tregisteredPostMeta: Record< string, Object >;\n}\n\ntype EntityRecordKey = string | number;\n\ninterface EntitiesState {\n\tconfig: EntityConfig[];\n\trecords: Record< string, Record< string, EntityState< ET.EntityRecord > > >;\n}\n\ninterface QueriedData {\n\titems: Record< ET.Context, Record< number, ET.EntityRecord > >;\n\titemIsComplete: Record< ET.Context, Record< number, boolean > >;\n\tqueries: Record< ET.Context, Record< string, Array< number > > >;\n}\n\ntype RevisionRecord =\n\t| Record< ET.Context, Record< number, ET.PostRevision > >\n\t| Record< ET.Context, Record< number, ET.GlobalStylesRevision > >;\n\ninterface RevisionsQueriedData {\n\titems: RevisionRecord;\n\titemIsComplete: Record< ET.Context, Record< number, boolean > >;\n\tqueries: Record< ET.Context, Record< string, Array< number > > >;\n}\n\ninterface EntityState< EntityRecord extends ET.EntityRecord > {\n\tedits: Record< string, Partial< EntityRecord > >;\n\tsaving: Record<\n\t\tstring,\n\t\tPartial< { pending: boolean; isAutosave: boolean; error: Error } >\n\t>;\n\tdeleting: Record< string, Partial< { pending: boolean; error: Error } > >;\n\tqueriedData: QueriedData;\n\trevisions?: RevisionsQueriedData;\n}\n\ninterface EntityConfig {\n\tname: string;\n\tkind: string;\n}\n\ninterface UserState {\n\tqueries: Record< string, EntityRecordKey[] >;\n\tbyId: Record< EntityRecordKey, ET.User< 'edit' > >;\n}\n\ntype TemplateQuery = {\n\tslug?: string;\n\tis_custom?: boolean;\n\tignore_empty?: boolean;\n};\n\nexport interface UserPatternCategory {\n\tid: number;\n\tname: string;\n\tlabel: string;\n\tslug: string;\n\tdescription: string;\n}\n\ntype Optional< T > = T | undefined;\n\n/**\n * HTTP Query parameters sent with the API request to fetch the entity records.\n */\ntype GetRecordsHttpQuery = Record< string, any >;\n\n/**\n * Arguments for EntityRecord selectors.\n */\ntype EntityRecordArgs =\n\t| [ string, string, EntityRecordKey ]\n\t| [ string, string, EntityRecordKey, GetRecordsHttpQuery ];\n\ntype EntityResource = { kind: string; name: string; id?: EntityRecordKey };\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param state Data state.\n * @param url   URL the preview would be for.\n *\n * @return Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select: any ) =>\n\t\t( state: State, url: string ): boolean => {\n\t\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [\n\t\t\t\turl,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param      state Data state.\n * @param      query Optional object of query parameters to\n *                   include with request. For valid query parameters see the [Users page](https://developer.wordpress.org/rest-api/reference/users/) in the REST API Handbook and see the arguments for [List Users](https://developer.wordpress.org/rest-api/reference/users/#list-users) and [Retrieve a User](https://developer.wordpress.org/rest-api/reference/users/#retrieve-a-user).\n * @return Authors list.\n */\nexport function getAuthors(\n\tstate: State,\n\tquery?: GetRecordsHttpQuery\n): ET.User[] {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param state Data state.\n *\n * @return Current user object.\n */\nexport function getCurrentUser( state: State ): ET.User< 'edit' > {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param state   Data state.\n * @param queryID Query ID.\n *\n * @return Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state: State, queryID: string ): ET.User< 'edit' >[] => {\n\t\tconst queryResults = state.users.queries[ queryID ] ?? [];\n\n\t\treturn queryResults.map( ( id ) => state.users.byId[ id ] );\n\t},\n\t( state: State, queryID: string ) => [\n\t\tstate.users.queries[ queryID ],\n\t\tstate.users.byId,\n\t]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param      state Data state.\n * @param      kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state: State, kind: string ): Array< any > {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param state Data state.\n * @param kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport const getEntitiesConfig = createSelector(\n\t( state: State, kind: string ): Array< any > =>\n\t\tstate.entities.config.filter( ( entity ) => entity.kind === kind ),\n\t/* eslint-disable @typescript-eslint/no-unused-vars */\n\t( state: State, kind: string ) => state.entities.config\n\t/* eslint-enable @typescript-eslint/no-unused-vars */\n);\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param      state Data state.\n * @param      kind  Entity kind.\n * @param      name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntity( state: State, kind: string, name: string ): any {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param state Data state.\n * @param kind  Entity kind.\n * @param name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntityConfig(\n\tstate: State,\n\tkind: string,\n\tname: string\n): any {\n\treturn state.entities.config?.find(\n\t\t( config ) => config.kind === kind && config.name === name\n\t);\n}\n\n/**\n * GetEntityRecord is declared as a *callable interface* with\n * two signatures to work around the fact that TypeScript doesn't\n * allow currying generic functions:\n *\n * ```ts\n * \t\ttype CurriedState = F extends ( state: any, ...args: infer P ) => infer R\n * \t\t\t? ( ...args: P ) => R\n * \t\t\t: F;\n * \t\ttype Selector = <K extends string | number>(\n *         state: any,\n *         kind: K,\n *         key: K extends string ? 'string value' : false\n *    ) => K;\n * \t\ttype BadlyInferredSignature = CurriedState< Selector >\n *    // BadlyInferredSignature evaluates to:\n *    // (kind: string number, key: false | \"string value\") => string number\n * ```\n *\n * The signature without the state parameter shipped as CurriedSignature\n * is used in the return value of `select( coreStore )`.\n *\n * See https://github.com/WordPress/gutenberg/pull/41578 for more details.\n */\nexport interface GetEntityRecord {\n\t<\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord | undefined;\n\n\tCurriedSignature: <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => EntityRecord | undefined;\n\t__unstableNormalizeArgs?: ( args: EntityRecordArgs ) => EntityRecordArgs;\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key\n * @param query Optional query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available \"Retrieve a [Entity kind]\".\n *\n * @return Record.\n */\nexport const getEntityRecord = createSelector(\n\t( <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord | undefined => {\n\t\tconst queriedState =\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tlet value = item;\n\t\t\t\tfield.forEach( ( fieldName ) => {\n\t\t\t\t\tvalue = value?.[ fieldName ];\n\t\t\t\t} );\n\t\t\t\tsetNestedValue( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem as EntityRecord;\n\t\t}\n\n\t\treturn item;\n\t} ) as GetEntityRecord,\n\t( state: State, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData?.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t?.itemIsComplete[ context ]?.[ recordId ],\n\t\t];\n\t}\n) as GetEntityRecord;\n\n/**\n * Normalizes `recordKey`s that look like numeric IDs to numbers.\n *\n * @param args EntityRecordArgs the selector arguments.\n * @return EntityRecordArgs the normalized arguments.\n */\ngetEntityRecord.__unstableNormalizeArgs = (\n\targs: EntityRecordArgs\n): EntityRecordArgs => {\n\tconst newArgs = [ ...args ] as EntityRecordArgs;\n\tconst recordKey = newArgs?.[ 2 ];\n\n\t// If recordKey looks to be a numeric ID then coerce to number.\n\tnewArgs[ 2 ] = isNumericID( recordKey ) ? Number( recordKey ) : recordKey;\n\n\treturn newArgs;\n};\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key\n *\n * @return Record.\n */\nexport function __experimentalGetEntityRecordNoResolver<\n\tEntityRecord extends ET.EntityRecord< any >,\n>( state: State, kind: string, name: string, key: EntityRecordKey ) {\n\treturn getEntityRecord< EntityRecord >( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param state State tree.\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key.\n *\n * @return Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t< EntityRecord extends ET.EntityRecord< any > >(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey\n\t): EntityRecord | undefined => {\n\t\tconst record = getEntityRecord< EntityRecord >(\n\t\t\tstate,\n\t\t\tkind,\n\t\t\tname,\n\t\t\tkey\n\t\t);\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = record[ _key ]?.raw ?? record[ _key ];\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} as any )\n\t\t);\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData?.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t?.itemIsComplete[ context ]?.[ recordId ],\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return  Whether entity records have been received.\n */\nexport function hasEntityRecords(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery?: GetRecordsHttpQuery\n): boolean {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * GetEntityRecord is declared as a *callable interface* with\n * two signatures to work around the fact that TypeScript doesn't\n * allow currying generic functions.\n *\n * @see GetEntityRecord\n * @see https://github.com/WordPress/gutenberg/pull/41578\n */\nexport interface GetEntityRecords {\n\t<\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord[] | null;\n\n\tCurriedSignature: <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tkind: string,\n\t\tname: string,\n\t\tquery?: GetRecordsHttpQuery\n\t) => EntityRecord[] | null;\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return Records.\n */\nexport const getEntityRecords = ( <\n\tEntityRecord extends\n\t\t| ET.EntityRecord< any >\n\t\t| Partial< ET.EntityRecord< any > >,\n>(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery: GetRecordsHttpQuery\n): EntityRecord[] | null => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n} ) as GetEntityRecords;\n\n/**\n * Returns the Entity's total available records for a given query (ignoring pagination).\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return number | null.\n */\nexport const getEntityRecordsTotalItems = (\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery: GetRecordsHttpQuery\n): number | null => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedTotalItems( queriedState, query );\n};\n\n/**\n * Returns the number of available pages for the given query.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return number | null.\n */\nexport const getEntityRecordsTotalPages = (\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery: GetRecordsHttpQuery\n): number | null => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\tif ( query.per_page === -1 ) {\n\t\treturn 1;\n\t}\n\tconst totalItems = getQueriedTotalItems( queriedState, query );\n\tif ( ! totalItems ) {\n\t\treturn totalItems;\n\t}\n\t// If `per_page` is not set and the query relies on the defaults of the\n\t// REST endpoint, get the info from query's meta.\n\tif ( ! query.per_page ) {\n\t\treturn getQueriedTotalPages( queriedState, query );\n\t}\n\treturn Math.ceil( totalItems / query.per_page );\n};\n\ntype DirtyEntityRecord = {\n\ttitle: string;\n\tkey: EntityRecordKey;\n\tname: string;\n\tkind: string;\n};\n/**\n * Returns the list of dirty entity records.\n *\n * @param state State tree.\n *\n * @return The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords: DirtyEntityRecord[] = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = (\n\t\t\t\t\tObject.keys( records[ kind ][ name ].edits ) as string[]\n\t\t\t\t ).filter(\n\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\tgetEntityRecord( state, kind, name, primaryKey ) &&\n\t\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey: entityRecord\n\t\t\t\t\t\t\t\t? entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param state State tree.\n *\n * @return The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved: DirtyEntityRecord[] = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = (\n\t\t\t\t\tObject.keys( records[ kind ][ name ].saving ) as string[]\n\t\t\t\t ).filter( ( primaryKey ) =>\n\t\t\t\t\tisSavingEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey: entityRecord\n\t\t\t\t\t\t\t\t? entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's edits.\n */\nexport function getEntityRecordEdits(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): Optional< any > {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.edits?.[\n\t\trecordId as string | number\n\t];\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey\n\t): Optional< any > => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state: State, kind: string, name: string, recordId: EntityRecordKey ) => [\n\t\tstate.entities.config,\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.edits?.[ recordId ],\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t< EntityRecord extends ET.EntityRecord< any > >(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey\n\t): ET.Updatable< EntityRecord > | false => {\n\t\tconst raw = getRawEntityRecord( state, kind, name, recordId );\n\t\tconst edited = getEntityRecordEdits( state, kind, name, recordId );\n\t\t// Never return a non-falsy empty object. Unfortunately we can't return\n\t\t// undefined or null because we were previously returning an empty\n\t\t// object, so trying to read properties from the result would throw.\n\t\t// Using false here is a workaround to avoid breaking changes.\n\t\tif ( ! raw && ! edited ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn {\n\t\t\t...raw,\n\t\t\t...edited,\n\t\t};\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t.itemIsComplete[ context ]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.edits?.[ recordId ],\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\tconst { pending, isAutosave } =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.saving?.[ recordId ] ?? {};\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.saving?.[\n\t\t\trecordId as EntityRecordKey\n\t\t]?.pending ?? false\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.deleting?.[\n\t\t\trecordId as EntityRecordKey\n\t\t]?.pending ?? false\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntitySaveError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): any {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.saving?.[ recordId ]\n\t\t?.error;\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntityDeleteError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): any {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.deleting?.[ recordId ]\n\t\t?.error;\n}\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @deprecated since 6.3\n *\n * @param      state State tree.\n *\n * @return The edit.\n */\nexport function getUndoEdit( state: State ): Optional< any > {\n\tdeprecated( \"select( 'core' ).getUndoEdit()\", {\n\t\tsince: '6.3',\n\t} );\n\treturn undefined;\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @deprecated since 6.3\n *\n * @param      state State tree.\n *\n * @return The edit.\n */\nexport function getRedoEdit( state: State ): Optional< any > {\n\tdeprecated( \"select( 'core' ).getRedoEdit()\", {\n\t\tsince: '6.3',\n\t} );\n\treturn undefined;\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param state State tree.\n *\n * @return Whether there is a previous edit or not.\n */\nexport function hasUndo( state: State ): boolean {\n\treturn state.undoManager.hasUndo();\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param state State tree.\n *\n * @return Whether there is a next edit or not.\n */\nexport function hasRedo( state: State ): boolean {\n\treturn state.undoManager.hasRedo();\n}\n\n/**\n * Return the current theme.\n *\n * @param state Data state.\n *\n * @return The current theme.\n */\nexport function getCurrentTheme( state: State ): any {\n\tif ( ! state.currentTheme ) {\n\t\treturn null;\n\t}\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state: State ): string {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param state Data state.\n *\n * @return Index data.\n */\nexport function getThemeSupports( state: State ): any {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param state Data state.\n * @param url   Embedded URL.\n *\n * @return Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state: State, url: string ): any {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param state Data state.\n * @param url   Embedded URL.\n *\n * @return Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state: State, url: string ): boolean {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param state    Data state.\n * @param action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param resource Entity resource to check. Accepts entity object `{ kind: 'root', name: 'media', id: 1 }`\n *                 or REST base as a string - `media`.\n * @param id       Optional ID of the rest resource to check.\n *\n * @return Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser(\n\tstate: State,\n\taction: string,\n\tresource: string | EntityResource,\n\tid?: EntityRecordKey\n): boolean | undefined {\n\tconst isEntity = typeof resource === 'object';\n\tif ( isEntity && ( ! resource.kind || ! resource.name ) ) {\n\t\treturn false;\n\t}\n\n\tconst key = getUserPermissionCacheKey( action, resource, id );\n\n\treturn state.userPermissions[ key ];\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param state    Data state.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record's id.\n * @return Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean | undefined {\n\tdeprecated( `wp.data.select( 'core' ).canUserEditEntityRecord()`, {\n\t\tsince: '6.7',\n\t\talternative: `wp.data.select( 'core' ).canUser( 'update', { kind, name, id } )`,\n\t} );\n\n\treturn canUser( state, 'update', { kind, name, id: recordId } );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n *\n * @return An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves(\n\tstate: State,\n\tpostType: string,\n\tpostId: EntityRecordKey\n): Array< any > | undefined {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n * @param authorId The id of the author.\n *\n * @return The autosave for the post and author.\n */\nexport function getAutosave< EntityRecord extends ET.EntityRecord< any > >(\n\tstate: State,\n\tpostType: string,\n\tpostId: EntityRecordKey,\n\tauthorId: EntityRecordKey\n): EntityRecord | undefined {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\n\treturn autosaves?.find(\n\t\t( autosave: any ) => autosave.author === authorId\n\t) as EntityRecord | undefined;\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n *\n * @return True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) =>\n\t\t(\n\t\t\tstate: State,\n\t\t\tpostType: string,\n\t\t\tpostId: EntityRecordKey\n\t\t): boolean => {\n\t\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\t\tpostType,\n\t\t\t\tpostId,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param state Editor state.\n *\n * @return A value whose reference will change only when an edit occurs.\n */\nexport function getReferenceByDistinctEdits( state ) {\n\treturn state.editsReference;\n}\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param state Editor state.\n * @param link  Link.\n *\n * @return The template record.\n */\nexport function __experimentalGetTemplateForLink(\n\tstate: State,\n\tlink: string\n): Optional< ET.Updatable< ET.WpTemplate > > | null | false {\n\tconst records = getEntityRecords< ET.WpTemplate >(\n\t\tstate,\n\t\t'postType',\n\t\t'wp_template',\n\t\t{\n\t\t\t'find-template': link,\n\t\t}\n\t);\n\n\tif ( records?.length ) {\n\t\treturn getEditedEntityRecord< ET.WpTemplate >(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\trecords[ 0 ].id\n\t\t);\n\t}\n\treturn null;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param state Editor state.\n *\n * @return The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles(\n\tstate: State\n): any {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations(\n\tstate: State\n): string | null {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param state Data state.\n *\n * @return Block pattern list.\n */\nexport function getBlockPatterns( state: State ): Array< any > {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param state Data state.\n *\n * @return Block pattern category list.\n */\nexport function getBlockPatternCategories( state: State ): Array< any > {\n\treturn state.blockPatternCategories;\n}\n\n/**\n * Retrieve the registered user pattern categories.\n *\n * @param state Data state.\n *\n * @return User patterns category array.\n */\n\nexport function getUserPatternCategories(\n\tstate: State\n): Array< UserPatternCategory > {\n\treturn state.userPatternCategories;\n}\n\n/**\n * Returns the revisions of the current global styles theme.\n *\n * @deprecated since WordPress 6.5.0. Callers should use `select( 'core' ).getRevisions( 'root', 'globalStyles', ${ recordKey } )` instead, where `recordKey` is the id of the global styles parent post.\n *\n * @param      state Data state.\n *\n * @return The current global styles.\n */\nexport function getCurrentThemeGlobalStylesRevisions(\n\tstate: State\n): Array< object > | null {\n\tdeprecated( \"select( 'core' ).getCurrentThemeGlobalStylesRevisions()\", {\n\t\tsince: '6.5.0',\n\t\talternative:\n\t\t\t\"select( 'core' ).getRevisions( 'root', 'globalStyles', ${ recordKey } )\",\n\t} );\n\tconst currentGlobalStylesId =\n\t\t__experimentalGetCurrentGlobalStylesId( state );\n\n\tif ( ! currentGlobalStylesId ) {\n\t\treturn null;\n\t}\n\n\treturn state.themeGlobalStyleRevisions[ currentGlobalStylesId ];\n}\n\n/**\n * Returns the default template use to render a given query.\n *\n * @param state Data state.\n * @param query Query.\n *\n * @return The default template id for the given query.\n */\nexport function getDefaultTemplateId(\n\tstate: State,\n\tquery: TemplateQuery\n): string {\n\treturn state.defaultTemplates[ JSON.stringify( query ) ];\n}\n\n/**\n * Returns an entity's revisions.\n *\n * @param state     State tree\n * @param kind      Entity kind.\n * @param name      Entity name.\n * @param recordKey The key of the entity record whose revisions you want to fetch.\n * @param query     Optional query. If requesting specific\n *                  fields, fields must always include the ID. For valid query parameters see revisions schema in [the REST API Handbook](https://developer.wordpress.org/rest-api/reference/). Then see the arguments available \"Retrieve a [Entity kind]\".\n *\n * @return Record.\n */\nexport const getRevisions = (\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordKey: EntityRecordKey,\n\tquery?: GetRecordsHttpQuery\n): RevisionRecord[] | null => {\n\tconst queriedStateRevisions =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.revisions?.[ recordKey ];\n\tif ( ! queriedStateRevisions ) {\n\t\treturn null;\n\t}\n\n\treturn getQueriedItems( queriedStateRevisions, query );\n};\n\n/**\n * Returns a single, specific revision of a parent entity.\n *\n * @param state       State tree\n * @param kind        Entity kind.\n * @param name        Entity name.\n * @param recordKey   The key of the entity record whose revisions you want to fetch.\n * @param revisionKey The revision's key.\n * @param query       Optional query. If requesting specific\n *                    fields, fields must always include the ID. For valid query parameters see revisions schema in [the REST API Handbook](https://developer.wordpress.org/rest-api/reference/). Then see the arguments available \"Retrieve a [entity kind]\".\n *\n * @return Record.\n */\nexport const getRevision = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordKey: EntityRecordKey,\n\t\trevisionKey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t): RevisionRecord | Record< PropertyKey, never > | undefined => {\n\t\tconst queriedState =\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.revisions?.[\n\t\t\t\trecordKey\n\t\t\t];\n\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ revisionKey ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ revisionKey ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ revisionKey ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tlet value = item;\n\t\t\t\tfield.forEach( ( fieldName ) => {\n\t\t\t\t\tvalue = value?.[ fieldName ];\n\t\t\t\t} );\n\t\t\t\tsetNestedValue( filteredItem, field, value );\n\t\t\t}\n\n\t\t\treturn filteredItem;\n\t\t}\n\n\t\treturn item;\n\t},\n\t( state: State, kind, name, recordKey, revisionKey, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.revisions?.[ recordKey ]\n\t\t\t\t?.items?.[ context ]?.[ revisionKey ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.revisions?.[ recordKey ]\n\t\t\t\t?.itemIsComplete?.[ context ]?.[ revisionKey ],\n\t\t];\n\t}\n);\n"],"mappings":"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","ignoreList":[]}