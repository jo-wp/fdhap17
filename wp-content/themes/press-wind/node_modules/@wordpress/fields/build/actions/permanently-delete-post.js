/* wp:polyfill */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _coreData = require("@wordpress/core-data");
var _i18n = require("@wordpress/i18n");
var _notices = require("@wordpress/notices");
var _icons = require("@wordpress/icons");
var _utils = require("./utils");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const permanentlyDeletePost = {
  id: 'permanently-delete',
  label: (0, _i18n.__)('Permanently delete'),
  supportsBulk: true,
  icon: _icons.trash,
  isEligible(item) {
    if ((0, _utils.isTemplateOrTemplatePart)(item) || item.type === 'wp_block') {
      return false;
    }
    const {
      status,
      permissions
    } = item;
    return status === 'trash' && permissions?.delete;
  },
  async callback(posts, {
    registry,
    onActionPerformed
  }) {
    const {
      createSuccessNotice,
      createErrorNotice
    } = registry.dispatch(_notices.store);
    const {
      deleteEntityRecord
    } = registry.dispatch(_coreData.store);
    const promiseResult = await Promise.allSettled(posts.map(post => {
      return deleteEntityRecord('postType', post.type, post.id, {
        force: true
      }, {
        throwOnError: true
      });
    }));
    // If all the promises were fulfilled with success.
    if (promiseResult.every(({
      status
    }) => status === 'fulfilled')) {
      let successMessage;
      if (promiseResult.length === 1) {
        successMessage = (0, _i18n.sprintf)(/* translators: The posts's title. */
        (0, _i18n.__)('"%s" permanently deleted.'), (0, _utils.getItemTitle)(posts[0]));
      } else {
        successMessage = (0, _i18n.__)('The items were permanently deleted.');
      }
      createSuccessNotice(successMessage, {
        type: 'snackbar',
        id: 'permanently-delete-post-action'
      });
      onActionPerformed?.(posts);
    } else {
      // If there was at lease one failure.
      let errorMessage;
      // If we were trying to permanently delete a single post.
      if (promiseResult.length === 1) {
        const typedError = promiseResult[0];
        if (typedError.reason?.message) {
          errorMessage = typedError.reason.message;
        } else {
          errorMessage = (0, _i18n.__)('An error occurred while permanently deleting the item.');
        }
        // If we were trying to permanently delete multiple posts
      } else {
        const errorMessages = new Set();
        const failedPromises = promiseResult.filter(({
          status
        }) => status === 'rejected');
        for (const failedPromise of failedPromises) {
          const typedError = failedPromise;
          if (typedError.reason?.message) {
            errorMessages.add(typedError.reason.message);
          }
        }
        if (errorMessages.size === 0) {
          errorMessage = (0, _i18n.__)('An error occurred while permanently deleting the items.');
        } else if (errorMessages.size === 1) {
          errorMessage = (0, _i18n.sprintf)(/* translators: %s: an error message */
          (0, _i18n.__)('An error occurred while permanently deleting the items: %s'), [...errorMessages][0]);
        } else {
          errorMessage = (0, _i18n.sprintf)(/* translators: %s: a list of comma separated error messages */
          (0, _i18n.__)('Some errors occurred while permanently deleting the items: %s'), [...errorMessages].join(','));
        }
      }
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    }
  }
};
var _default = exports.default = permanentlyDeletePost;
//# sourceMappingURL=permanently-delete-post.js.map