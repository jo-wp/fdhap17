"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _clsx = _interopRequireDefault(require("clsx"));
var _keycodes = require("@wordpress/keycodes");
var _data = require("@wordpress/data");
var _blockEditor = require("@wordpress/block-editor");
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _i18n = require("@wordpress/i18n");
var _icons = require("@wordpress/icons");
var _socialList = require("./social-list");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const SocialLinkURLPopover = ({
  url,
  setAttributes,
  setPopover,
  popoverAnchor,
  clientId
}) => {
  const {
    removeBlock
  } = (0, _data.useDispatch)(_blockEditor.store);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.URLPopover, {
    anchor: popoverAnchor,
    "aria-label": (0, _i18n.__)('Edit social link'),
    onClose: () => {
      setPopover(false);
      popoverAnchor?.focus();
    },
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("form", {
      className: "block-editor-url-popover__link-editor",
      onSubmit: event => {
        event.preventDefault();
        setPopover(false);
        popoverAnchor?.focus();
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "block-editor-url-input",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.URLInput, {
          value: url,
          onChange: nextURL => setAttributes({
            url: nextURL
          }),
          placeholder: (0, _i18n.__)('Enter social link'),
          label: (0, _i18n.__)('Enter social link'),
          hideLabelFromVision: true,
          disableSuggestions: true,
          onKeyDown: event => {
            if (!!url || event.defaultPrevented || ![_keycodes.BACKSPACE, _keycodes.DELETE].includes(event.keyCode)) {
              return;
            }
            removeBlock(clientId);
          },
          suffix: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.__experimentalInputControlSuffixWrapper, {
            variant: "control",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.Button, {
              icon: _icons.keyboardReturn,
              label: (0, _i18n.__)('Apply'),
              type: "submit",
              size: "small"
            })
          })
        })
      })
    })
  });
};
const SocialLinkEdit = ({
  attributes,
  context,
  isSelected,
  setAttributes,
  clientId
}) => {
  const {
    url,
    service,
    label = '',
    rel
  } = attributes;
  const {
    showLabels,
    iconColor,
    iconColorValue,
    iconBackgroundColor,
    iconBackgroundColorValue
  } = context;
  const [showURLPopover, setPopover] = (0, _element.useState)(false);
  const classes = (0, _clsx.default)('wp-social-link', 'wp-social-link-' + service, {
    'wp-social-link__is-incomplete': !url,
    [`has-${iconColor}-color`]: iconColor,
    [`has-${iconBackgroundColor}-background-color`]: iconBackgroundColor
  });

  // Use internal state instead of a ref to make sure that the component
  // re-renders when the popover's anchor updates.
  const [popoverAnchor, setPopoverAnchor] = (0, _element.useState)(null);
  const IconComponent = (0, _socialList.getIconBySite)(service);
  const socialLinkName = (0, _socialList.getNameBySite)(service);
  // The initial label (ie. the link text) is an empty string.
  // We want to prevent empty links so that the link text always fallbacks to
  // the social name, even when users enter and save an empty string or only
  // spaces. The PHP render callback fallbacks to the social name as well.
  const socialLinkText = label.trim() === '' ? socialLinkName : label;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: classes,
    style: {
      color: iconColorValue,
      backgroundColor: iconBackgroundColorValue
    }
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.InspectorControls, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.PanelBody, {
        title: (0, _i18n.__)('Settings'),
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.PanelRow, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.TextControl, {
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true,
            label: (0, _i18n.__)('Text'),
            help: (0, _i18n.__)('The text is visible when enabled from the parent Social Icons block.'),
            value: label,
            onChange: value => setAttributes({
              label: value
            }),
            placeholder: socialLinkName
          })
        })
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_blockEditor.InspectorControls, {
      group: "advanced",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_components.TextControl, {
        __next40pxDefaultSize: true,
        __nextHasNoMarginBottom: true,
        label: (0, _i18n.__)('Link rel'),
        value: rel || '',
        onChange: value => setAttributes({
          rel: value
        })
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)("li", {
      ...blockProps,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
        className: "wp-block-social-link-anchor",
        ref: setPopoverAnchor,
        onClick: () => setPopover(true),
        "aria-haspopup": "dialog",
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(IconComponent, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          className: (0, _clsx.default)('wp-block-social-link-label', {
            'screen-reader-text': !showLabels
          }),
          children: socialLinkText
        })]
      }), isSelected && showURLPopover && /*#__PURE__*/(0, _jsxRuntime.jsx)(SocialLinkURLPopover, {
        url: url,
        setAttributes: setAttributes,
        setPopover: setPopover,
        popoverAnchor: popoverAnchor,
        clientId: clientId
      })]
    })]
  });
};
var _default = exports.default = SocialLinkEdit;
//# sourceMappingURL=edit.js.map