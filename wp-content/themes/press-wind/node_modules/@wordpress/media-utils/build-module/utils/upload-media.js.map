{"version":3,"names":["__","sprintf","createBlobURL","revokeBlobURL","uploadToServer","validateMimeType","validateMimeTypeForUser","validateFileSize","UploadError","uploadMedia","wpAllowedMimeTypes","allowedTypes","additionalData","filesList","maxUploadFileSize","onError","onFileChange","signal","validFiles","filesSet","setAndUpdateFiles","index","value","url","filter","attachment","mediaFile","error","push","map","file","message","Error","name","code","cause","undefined"],"sources":["@wordpress/media-utils/src/utils/upload-media.ts"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\n\n/**\n * Internal dependencies\n */\nimport type {\n\tAdditionalData,\n\tAttachment,\n\tOnChangeHandler,\n\tOnErrorHandler,\n\tOnSuccessHandler,\n} from './types';\nimport { uploadToServer } from './upload-to-server';\nimport { validateMimeType } from './validate-mime-type';\nimport { validateMimeTypeForUser } from './validate-mime-type-for-user';\nimport { validateFileSize } from './validate-file-size';\nimport { UploadError } from './upload-error';\n\ninterface UploadMediaArgs {\n\t// Additional data to include in the request.\n\tadditionalData?: AdditionalData;\n\t// Array with the types of media that can be uploaded, if unset all types are allowed.\n\tallowedTypes?: string[];\n\t// List of files.\n\tfilesList: File[];\n\t// Maximum upload size in bytes allowed for the site.\n\tmaxUploadFileSize?: number;\n\t// Function called when an error happens.\n\tonError?: OnErrorHandler;\n\t// Function called each time a file or a temporary representation of the file is available.\n\tonFileChange?: OnChangeHandler;\n\t// Function called once a file has completely finished uploading, including thumbnails.\n\tonSuccess?: OnSuccessHandler;\n\t// List of allowed mime types and file extensions.\n\twpAllowedMimeTypes?: Record< string, string > | null;\n\t// Abort signal.\n\tsignal?: AbortSignal;\n}\n\n/**\n * Upload a media file when the file upload button is activated\n * or when adding a file to the editor via drag & drop.\n *\n * @param $0                    Parameters object passed to the function.\n * @param $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param $0.additionalData     Additional data to include in the request.\n * @param $0.filesList          List of files.\n * @param $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param $0.onError            Function called when an error happens.\n * @param $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n * @param $0.signal             Abort signal.\n */\nexport function uploadMedia( {\n\twpAllowedMimeTypes,\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError,\n\tonFileChange,\n\tsignal,\n}: UploadMediaArgs ) {\n\tconst validFiles = [];\n\n\tconst filesSet: Array< Partial< Attachment > | null > = [];\n\tconst setAndUpdateFiles = ( index: number, value: Attachment | null ) => {\n\t\tif ( filesSet[ index ]?.url ) {\n\t\t\trevokeBlobURL( filesSet[ index ].url );\n\t\t}\n\t\tfilesSet[ index ] = value;\n\t\tonFileChange?.(\n\t\t\tfilesSet.filter( ( attachment ) => attachment !== null )\n\t\t);\n\t};\n\n\tfor ( const mediaFile of filesList ) {\n\t\t// Verify if user is allowed to upload this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeTypeForUser( mediaFile, wpAllowedMimeTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if the caller (e.g. a block) supports this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeType( mediaFile, allowedTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Verify if file is greater than the maximum file upload size allowed for the site.\n\t\ttry {\n\t\t\tvalidateFileSize( mediaFile, maxUploadFileSize );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalidFiles.push( mediaFile );\n\n\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t// with final file from media gallery when upload is `done` below.\n\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\tonFileChange?.( filesSet as Array< Partial< Attachment > > );\n\t}\n\n\tvalidFiles.map( async ( file, index ) => {\n\t\ttry {\n\t\t\tconst attachment = await uploadToServer(\n\t\t\t\tfile,\n\t\t\t\tadditionalData,\n\t\t\t\tsignal\n\t\t\t);\n\t\t\tsetAndUpdateFiles( index, attachment );\n\t\t} catch ( error ) {\n\t\t\t// Reset to empty on failure.\n\t\t\tsetAndUpdateFiles( index, null );\n\n\t\t\tlet message;\n\t\t\tif ( error instanceof Error ) {\n\t\t\t\tmessage = error.message;\n\t\t\t} else {\n\t\t\t\tmessage = sprintf(\n\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\tfile.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tonError?.(\n\t\t\t\tnew UploadError( {\n\t\t\t\t\tcode: 'GENERAL',\n\t\t\t\t\tmessage,\n\t\t\t\t\tfile,\n\t\t\t\t\tcause: error instanceof Error ? error : undefined,\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t} );\n}\n"],"mappings":"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","ignoreList":[]}